// THIS FILE IS GENERATED
// WARNING! All changes made in this file will be lost!

#include "generated/rubyvisitor.h"

namespace ruby
{

Visitor::ParserFuncType Visitor::sParserTable[] =
{
    reinterpret_cast<ParserFuncType>(&Visitor::visitAdditiveExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitAliasParameter),
    reinterpret_cast<ParserFuncType>(&Visitor::visitAndExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitAndorExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitArrayAccess),
    reinterpret_cast<ParserFuncType>(&Visitor::visitArrayExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitArrayReferenceArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitAssignmentExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBlockContent),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBlockMethodDefinitionArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBlockMethodInvocationArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBlock_var),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBlock_vars),
    reinterpret_cast<ParserFuncType>(&Visitor::visitBodyStatement),
    reinterpret_cast<ParserFuncType>(&Visitor::visitCaseExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitClassDefinition),
    reinterpret_cast<ParserFuncType>(&Visitor::visitClassName),
    reinterpret_cast<ParserFuncType>(&Visitor::visitCodeBlock),
    reinterpret_cast<ParserFuncType>(&Visitor::visitColonAccess),
    reinterpret_cast<ParserFuncType>(&Visitor::visitCommand),
    reinterpret_cast<ParserFuncType>(&Visitor::visitCommandOutput),
    reinterpret_cast<ParserFuncType>(&Visitor::visitCompoundStatement),
    reinterpret_cast<ParserFuncType>(&Visitor::visitDoOrTerminalOrColon),
    reinterpret_cast<ParserFuncType>(&Visitor::visitDotAccess),
    reinterpret_cast<ParserFuncType>(&Visitor::visitElementReference),
    reinterpret_cast<ParserFuncType>(&Visitor::visitEqualityExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitExceptionHandlingExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitExceptionList),
    reinterpret_cast<ParserFuncType>(&Visitor::visitExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitExpressionSubstitution),
    reinterpret_cast<ParserFuncType>(&Visitor::visitForExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitHashExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitIfExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeyValuePair),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeyword),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordAlias),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordAnd),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordAsMethodName),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordBeginUpcase),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordBreak),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordClass),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordDef),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordDefined),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordDo),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordEndUpcase),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordFor),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordIn),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordModule),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordNot),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordOr),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordUndef),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordUntil),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordWhen),
    reinterpret_cast<ParserFuncType>(&Visitor::visitKeywordWhile),
    reinterpret_cast<ParserFuncType>(&Visitor::visitLiteral),
    reinterpret_cast<ParserFuncType>(&Visitor::visitLogicalAndExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitLogicalOrExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodCall),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodDefinition),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodDefinitionArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodDefinitionArgumentWithoutParen),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodInvocationArgumentWithParen),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodInvocationArgumentWithoutParen),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodName),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMethodNameSupplement),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMlhs_item),
    reinterpret_cast<ParserFuncType>(&Visitor::visitModuleDefinition),
    reinterpret_cast<ParserFuncType>(&Visitor::visitModuleName),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMrhs),
    reinterpret_cast<ParserFuncType>(&Visitor::visitMultiplicativeExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitNormalMethodDefinitionArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitNormalMethodInvocationArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitNotExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitNumeric),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorAsMethodname),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBAnd),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBAndAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBNot),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBOr),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBXor),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBXorAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorBorAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorCaseEqual),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorColon),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorCompare),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorDiv),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorDivAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorEqual),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorExclusiveRange),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorGreaterOrEqual),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorGreaterThan),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorInclusiveRange),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLeftShift),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLeftShiftAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLessOrEqual),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLessThan),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLogicalAnd),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLogicalAndAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLogicalOr),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorLogicalOrAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorMatch),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorMinus),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorMinusAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorMod),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorModAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorNot),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorNotEqual),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorNotMatch),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorPlus),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorPlusAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorPower),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorPowerAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorQuestion),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorRightShift),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorRightShiftAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorStar),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorStarAssign),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorUnaryMinus),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOperatorUnaryPlus),
    reinterpret_cast<ParserFuncType>(&Visitor::visitOrExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitParallelAssignmentLeftOver),
    reinterpret_cast<ParserFuncType>(&Visitor::visitPowerExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitPredefinedValue),
    reinterpret_cast<ParserFuncType>(&Visitor::visitPrimaryExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitProgram),
    reinterpret_cast<ParserFuncType>(&Visitor::visitRangeExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitRegex),
    reinterpret_cast<ParserFuncType>(&Visitor::visitRelationalExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitRestMethodDefinitionArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitRestMethodInvocationArgument),
    reinterpret_cast<ParserFuncType>(&Visitor::visitShiftExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitStatement),
    reinterpret_cast<ParserFuncType>(&Visitor::visitStatementWithoutModifier),
    reinterpret_cast<ParserFuncType>(&Visitor::visitStatements),
    reinterpret_cast<ParserFuncType>(&Visitor::visitString),
    reinterpret_cast<ParserFuncType>(&Visitor::visitSymbol),
    reinterpret_cast<ParserFuncType>(&Visitor::visitTerminal),
    reinterpret_cast<ParserFuncType>(&Visitor::visitTernaryIfThenElseExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitThenOrTerminalOrColon),
    reinterpret_cast<ParserFuncType>(&Visitor::visitUnaryExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitUndefParameter),
    reinterpret_cast<ParserFuncType>(&Visitor::visitUnlessExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitUntilExpression),
    reinterpret_cast<ParserFuncType>(&Visitor::visitVariable),
    reinterpret_cast<ParserFuncType>(&Visitor::visitWhileExpression)
}; // sParserTable[]

} // end of namespace ruby

