#line 2 "ruby_lexer.cpp"

#line 4 "ruby_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ruby::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 114
#define YY_END_OF_BUFFER 115
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[366] =
    {   0,
       53,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  115,  114,  106,   73,  114,  114,
       99,  114,   60,   61,   88,   85,   67,   86,  114,  114,
       58,   58,   70,  105,   93,  104,   94,   53,   53,   53,
       63,   64,   95,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   66,   97,   74,   65,   62,  114,  107,  108,  111,
      110,  114,  106,   71,   72,    0,   46,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   98,   81,
        0,   45,    0,    0,    0,    0,    0,    0,    0,   87,

       78,   75,    0,   58,   58,   76,   59,    0,  113,   55,
        0,    0,   69,    0,   91,  101,  103,  102,   90,   92,
       54,   53,   53,   53,   82,   51,   49,   52,    0,   50,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   15,
       52,   52,   52,   52,   30,   42,   52,   52,   52,   40,
       52,   52,   52,   52,   52,   52,   52,   52,   83,   96,
       68,  109,  112,    0,    0,    0,    0,    0,    7,    0,
        0,    0,   79,    0,    0,    0,    0,    0,   77,   57,
       56,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   89,  100,   84,   53,   43,   48,   52,   52,   52,

       41,   52,   52,   52,   52,   36,   52,    1,   52,   52,
       34,   52,   52,   19,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   80,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   53,   52,
       52,   52,   52,   52,   31,   52,   52,    2,   52,   52,
       52,   52,   18,   29,   52,   52,   52,   24,   52,   37,
       20,   52,   52,   52,    6,   52,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   44,   52,   52,   13,   14,   17,   38,   52,

        3,   52,   21,   52,   52,   26,   52,   25,   12,   52,
       32,   33,   27,    0,    0,    0,    0,    0,   10,    8,
        0,    0,    0,   47,    0,    0,    0,   52,   52,   52,
        5,   35,    4,   16,   39,    0,    0,    0,   11,    9,
        0,    0,    0,    0,    0,    0,   52,   52,   52,    0,
        0,    0,    0,    0,   22,   23,   28,    0,    0,    0,
        0,    0,    0,    0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    4,    5,    2,    2,    6,    7,    8,    9,
       10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,   25,    2,   26,   27,   26,   28,   29,   30,
       31,   32,   33,   32,   32,   34,   32,   35,   32,   32,
       32,   32,   32,   32,   36,   32,   32,   32,   32,   32,
       37,   38,   39,   40,   41,    2,   42,   43,   44,   45,

       46,   47,   48,   49,   50,   51,   52,   53,   54,   55,
       56,   57,   51,   58,   59,   60,   61,   62,   63,   64,
       65,   51,   66,   67,    2,   68,    2,   69,   69,   69,
       69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
       69,   69,   69,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,    2,    2,   72,   72,   72,   72,   72,   72,   72,

       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   73,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   75,
       76,   76,   76,   77,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int32_t yy_meta[78] =
    {   0,
        1,    1,    2,    3,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    4,    4,    4,    3,
        1,    1,    1,    1,    3,    4,    4,    4,    4,    4,
        5,    5,    5,    5,    5,    5,    1,    1,    1,    1,
        5,    4,    4,    4,    4,    4,    4,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[398] =
    {   0,
        0,    0,  413,  412,  431,  430,  446,  445,   66,   67,
       75,   76,    0,    0,  464, 2378,  460,   61,   80,   38,
       79,   86, 2378, 2378,   82,  421, 2378,   89,   92,  427,
      102,  108,  422, 2378,   67,  107,   90,  150,  166,   87,
     2378, 2378,  418,  204,  200,  201,  237,  202,  245,  246,
      124,  252,  260,  269,  272,  289,  297,  306,  314,  321,
      329, 2378,   80, 2378, 2378, 2378,  414, 2378, 2378, 2378,
      409,  409,  426, 2378, 2378,   95, 2378,  375,  327,  300,
      376,  385,  400,  416,  381,  381,  371,  376,  401, 2378,
      312, 2378,  489,  488,  495,  504,  514,  574,  584,  397,

     2378, 2378,  117,  376,  123, 2378,  170,  400, 2378,  194,
      133,    0, 2378,  590,  391,  389, 2378, 2378, 2378,  387,
        0,  380,  117,  136, 2378, 2378, 2378,  336,  388, 2378,
      664,  180,  480,  494,  495,  509,  593,  503,  590,  591,
      610,  697,  698,  616,  699,  700,  712,  706,  724,  725,
      739,  743,  751,  758,  765,  777,  785,  799, 2378,  384,
     2378, 2378, 2378,    0,    0,    0,  774,  783, 2378,  347,
      191,  332, 2378,    0,    0,    0,  798,  824, 2378,  156,
        0,  805,  830,  900,  973, 1043,  908, 1113,  921, 1183,
      931, 2378, 2378, 2378,  213,  349, 2378,  335,  334,  819,

      906,  908,  920,  940,  997, 1037, 1038,  932,  998, 1051,
      946, 1065, 1071, 1057, 1074, 1118, 1119, 1121, 1125, 1138,
     1150, 1177, 1191, 1144, 1194, 1195, 1197, 2378,    0,    0,
     1256, 1169,  322,  317,  312,  307,    0,    0, 1326, 1032,
     1243, 1285, 1396,  337, 1457, 1488, 1302, 1528,  108,  323,
      318, 1209, 1272, 1392, 1321, 1322, 1391, 1432, 1433, 1504,
     1522, 1441, 1473, 1523, 1524, 1549, 1536, 1550, 1563, 1556,
     1591, 1592, 1604, 1605, 1611, 1618, 1630,    0,    0, 1659,
      291,  289,  294,  299,    0,    0, 1690, 1313, 1721, 1752,
     1783, 1823,  313,  308,  299, 1631, 1637, 1645, 1675, 1706,

     1768, 1817, 1799, 1818, 1819, 1831, 1832, 1851, 1854, 1855,
     1858, 1886, 1887,    0,    0, 1898,  281,  265, 2378, 2378,
        0,    0, 1929, 1846, 1960, 1991, 2022,  282,  272, 2038,
     1945, 1976, 2007, 2055, 2056,    0, 2018, 2024, 2378, 2378,
        0, 1355, 1684, 2085, 2116, 2147,  270,  267, 2057,    0,
        0, 2178, 2160, 2177,    0,    0, 2378,    0,    0, 2238,
        0,    0, 2269, 2300, 2378, 2347, 2352, 2357, 2362, 2364,
     2367,  302, 2372,  299,  292,  291,  287,  282,  279,  278,
      277,  274,  270,  265,  264,  259,  250,  239,  224,  219,
      214,  199,  186,  128,  111,   91,   83

    } ;

static yyconst flex_int16_t yy_def[398] =
    {   0,
      365,    1,  366,  366,  366,  366,  366,  366,  366,  366,
      366,  366,  366,  366,  365,  365,  365,  365,  367,  365,
      365,  368,  365,  365,  365,  365,  365,  365,  365,  369,
      365,  365,  365,  365,  365,  365,  365,  370,  370,   39,
      365,  365,  365,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  367,  365,  365,  367,  367,
      367,  367,  367,  367,  365,  365,  365,  365,  365,  365,
      368,  365,  365,  368,  368,  368,  368,  368,  368,  365,

      365,  365,  365,  365,  365,  365,  365,  369,  365,  365,
      365,  372,  365,  373,  365,  365,  365,  365,  365,  365,
      370,   39,   39,   39,  365,  365,  365,  371,  365,  365,
      371,  131,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  365,  365,
      365,  365,  365,  374,  375,  376,  367,  367,  365,  365,
      365,  365,  365,  377,  378,  379,  368,  368,  365,  365,
      372,  373,  373,  373,  373,  373,  373,  373,  373,  373,
      373,  365,  365,  365,   39,   39,  365,  131,  131,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  365,  380,  381,
      367,  367,  365,  365,  365,  365,  382,  383,  368,  368,
      373,  373,  373,  185,  243,  243,  373,  373,   39,  131,
      131,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  371,  371,  371,  371,  384,  385,  231,
      365,  365,  365,  365,  386,  387,  239,  373,  243,  243,
      243,  373,   39,  131,  131,  371,  371,  371,  371,  371,

      371,  371,  371,  371,  371,  371,  371,  371,  371,  371,
      371,  371,  371,  388,  389,  231,  365,  365,  365,  365,
      390,  391,  239,  373,  243,  243,  243,  131,  131,  371,
      371,  371,  371,  371,  371,  392,  367,  367,  365,  365,
      393,  368,  368,  243,  243,  243,  131,  131,  371,  394,
      395,  243,  373,  373,  131,  131,  365,  396,  397,  243,
      389,  391,  243,  243,    0,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365

    } ;

static yyconst flex_int16_t yy_nxt[2456] =
    {   0,
       16,   16,   17,   18,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   29,   30,   31,   32,   32,   33,
       34,   35,   36,   37,   16,   38,   39,   38,   40,   38,
       38,   38,   38,   38,   38,   38,   41,   16,   42,   43,
       44,   45,   46,   47,   48,   49,   50,   51,   51,   52,
       51,   51,   51,   53,   54,   55,   51,   56,   57,   58,
       59,   51,   60,   51,   61,   62,   63,   64,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   68,   68,   69,
       69,   70,   70,   74,   77,   89,  362,   85,  114,  115,
       71,   71,  100,   92,  361,   86,   72,   72,   87,   77,

       88,   90,  159,  103,  101,  104,  105,  105,  107,  107,
      107,  106,  119,  120,  359,  122,  103,   78,  110,  110,
      110,  124,  103,   93,  105,  105,  105,  126,   75,  116,
      117,  358,   78,  107,  107,  107,  122,  103,  127,  105,
      105,  105,  293,  129,  111,  122,  160,  195,  130,  180,
      180,   79,   80,   81,   82,   83,   84,   94,   95,   96,
       97,   98,   99,  196,  122,  112,   79,   80,   81,   82,
       83,   84,  180,  180,  118,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  107,  107,  107,  351,
      122,  122,  122,  122,  123,  122,  122,  122,  122,  122,

      122,  122,  350,  126,  126,  126,  122,  126,  103,  198,
      110,  110,  110,  199,  127,  127,  127,  342,  127,  129,
      129,  129,  341,  129,  130,  130,  130,  337,  130,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      126,  122,  336,  234,  132,  249,  135,  139,  126,  126,
      235,  127,  133,  322,  134,  126,  129,  140,  136,  127,
      127,  130,  321,  126,  129,  129,  127,  315,  314,  130,
      130,  129,  126,  286,  127,  126,  130,  285,  137,  129,
      279,  278,  239,  127,  130,  238,  127,  143,  129,  138,
      237,  129,  126,  130,  231,  230,  130,  141,  145,  142,

      126,  144,  229,  127,   77,  181,  146,  356,  129,  126,
      355,  127,  348,  130,  148,  147,  129,  126,  149,   92,
      127,  130,  347,  340,  126,  129,  339,  329,  127,  150,
      130,   77,  126,  129,  151,  127,  328,   78,  130,  126,
      129,  122,  152,  127,  320,  130,  319,  318,  129,   93,
      127,  317,  295,  130,  154,  129,  294,  153,  241,  284,
      130,  283,  282,  155,   78,  281,  251,  250,  156,  157,
       79,   79,   80,   81,   82,   83,   84,  122,  158,   76,
       77,  236,   76,   94,   95,   96,   97,   98,   99,   77,
      103,   76,  110,  110,  110,  167,  167,  167,   79,   80,

       81,   82,   83,   84,   77,  233,  228,  197,  122,  194,
      164,  193,   76,   78,  192,  109,   76,   76,  111,  179,
       77,   76,   78,  173,  172,  171,  170,  169,   73,   76,
      163,  162,   76,  161,   76,  165,   76,   78,  166,  112,
      125,  113,  109,  102,   79,   79,   79,   79,   80,   81,
       82,   83,   84,   78,  168,  168,   79,   80,   81,   82,
       83,   84,   73,  365,   67,   67,   66,   66,  168,  168,
      168,   79,   80,   81,   82,   83,   84,   65,   65,  365,
      365,  365,  365,  126,  168,  365,  365,   79,   80,   81,
       82,   83,   84,   91,  127,   92,   91,  126,  126,  129,

      365,  365,   92,  365,  130,   91,  126,  365,  127,  127,
      365,   92,  126,  129,  129,  365,  365,  127,  130,  130,
      365,   92,  129,  127,  174,   93,   91,  130,  129,  200,
       91,   91,   93,  130,  365,   91,  365,  365,  201,  365,
      365,   93,  202,   91,  205,  365,   91,  365,   91,  175,
       91,   93,  176,  365,  203,  365,  177,  177,  177,   94,
       95,   96,   97,   98,   99,   94,   94,   95,   96,   97,
       98,   99,   94,   94,   94,   94,   95,   96,   97,   98,
       99,   92,  365,  178,  178,   94,   95,   96,   97,   98,
       99,   92,  365,  126,  126,  365,  126,  183,  365,  365,

      365,  365,  365,  184,  127,  127,  365,  127,  365,  129,
      129,   93,  129,  126,  130,  130,  365,  130,  365,  126,
      365,   93,  365,  365,  127,  365,  365,  185,  365,  129,
      127,  365,  365,  365,  130,  129,  206,  365,  365,  365,
      130,  365,  178,  178,  178,   94,   95,   96,   97,   98,
       99,  204,  178,  365,  365,   94,   95,   96,   97,   98,
       99,  186,  187,  188,  189,  190,  191,  126,  207,  365,
      365,  365,  365,  211,  365,  365,  365,  365,  127,  365,
      365,  365,  365,  129,  365,  365,  365,  365,  130,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      126,  126,  126,  126,  131,  365,  365,  365,  365,  126,
      365,  127,  127,  127,  127,  126,  129,  129,  129,  129,
      127,  130,  130,  130,  130,  129,  127,  126,  126,  365,
      130,  129,  365,  365,  365,  365,  130,  365,  127,  127,
      365,  208,  126,  129,  129,  365,  126,  365,  130,  130,
      210,  365,  365,  127,  126,  209,  212,  127,  129,  365,
      365,  126,  129,  130,  365,  127,  365,  130,  126,  213,
      129,  365,  127,  365,  365,  130,  214,  129,   77,  127,
      126,  365,  130,  215,  129,  365,  365,   77,  126,  130,
      365,  127,  365,  365,  365,  218,  129,  216,  217,  127,

      365,  130,  126,  220,  129,   92,  365,  219,  365,  130,
      365,   78,  183,  127,  365,  365,  365,  365,  129,  365,
       78,  222,  126,  130,  365,  221,  241,  365,  365,  223,
      225,   92,  365,  127,  226,   93,  224,  183,  129,  365,
      365,  365,  185,  130,  227,   79,   80,   81,   82,   83,
       84,  232,  232,  232,   79,   80,   81,   82,   83,   84,
      252,   93,  365,  365,  365,  365,  365,  185,  365,   94,
       95,   96,   97,   98,   99,  365,  186,  187,  188,  189,
      190,  191,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  240,  240,  240,   94,   95,   96,   97,   98,

       99,  186,  187,  188,  189,  190,  191,  183,  365,  126,
      365,  126,  365,  365,  365,  183,  365,  365,  365,  365,
      127,  241,  127,  126,  365,  129,  365,  129,  183,  241,
      130,  365,  130,  365,  127,  126,  365,  185,  183,  129,
      365,  365,  241,  126,  130,  185,  127,  365,  365,  126,
      365,  129,  241,  365,  127,  365,  130,  253,  185,  129,
      127,  254,  365,  365,  130,  129,  365,  365,  185,  365,
      130,  186,  187,  188,  189,  190,  191,  242,  186,  186,
      187,  188,  189,  190,  191,  255,  365,  365,  365,  242,
      248,  248,  186,  187,  188,  189,  190,  191,  365,  248,

      126,  126,  186,  187,  188,  189,  190,  191,  243,  365,
      244,  127,  127,  365,  242,  242,  129,  129,  365,  242,
      365,  130,  130,  365,  365,  365,  365,  242,  365,  365,
      242,  365,  242,  245,  242,  365,  246,  365,  365,   92,
      126,  126,  365,  365,  186,  187,  188,  189,  190,  191,
      183,  127,  127,  365,  126,  256,  129,  129,  260,  365,
      126,  130,  130,  365,  241,  127,  365,  365,  126,   93,
      129,  127,  365,  365,  126,  130,  129,  126,  365,  127,
      185,  130,  365,  258,  129,  127,  257,  259,  127,  130,
      129,  365,  365,  129,  365,  130,  365,  365,  130,  365,

      177,  177,  177,   94,   95,   96,   97,   98,   99,  261,
      365,  247,  247,  247,  186,  187,  188,  189,  190,  191,
      183,  126,  126,  365,  126,  262,  365,  365,  126,  264,
      263,  365,  127,  127,  241,  127,  365,  129,  129,  127,
      129,  126,  130,  130,  129,  130,  365,  126,  365,  130,
      185,  365,  127,  126,  365,  365,  365,  129,  127,  365,
      365,  265,  130,  129,  127,  365,  365,  268,  130,  129,
      269,  365,  365,   77,  130,  365,  266,  365,  365,  267,
      126,  186,  186,  186,  186,  187,  188,  189,  190,  191,
      183,  127,  270,  274,  126,  271,  129,  126,  126,  365,

      126,  130,  365,  365,  241,  127,   78,  365,  127,  127,
      129,  127,  126,  129,  129,  130,  129,  365,  130,  130,
      185,  130,  272,  127,  365,  365,  365,  365,  129,  365,
      365,  365,  365,  130,  365,  365,  273,  167,  167,  167,
       79,   80,   81,   82,   83,   84,  365,  276,  275,  277,
      183,  248,  248,  248,  186,  187,  188,  189,  190,  191,
       77,  365,  365,  365,  288,  365,  365,  296,  365,  365,
      365,  365,  280,  280,  280,  126,  365,  365,  365,  365,
      185,  280,  280,  280,  280,  280,  127,  365,  365,  365,
      365,  129,  183,   78,  365,  365,  130,  280,  280,  280,

      280,  280,  280,  365,  365,  365,  241,  365,  365,  183,
      365,  365,  365,  324,  186,  187,  188,  189,  190,  191,
      183,  365,  185,  241,  126,  126,  297,   79,   80,   81,
       82,   83,   84,   92,  288,  127,  127,  365,  365,  185,
      129,  129,  287,  287,  287,  130,  130,  365,  365,  365,
      185,  287,  287,  287,  287,  287,  186,  187,  188,  189,
      190,  191,   92,   93,  365,  365,  365,  287,  287,  287,
      287,  287,  287,  186,  187,  188,  189,  190,  191,  365,
      299,  365,  365,  365,  186,  187,  188,  189,  190,  191,
      365,  365,   93,  365,  126,  126,  365,   94,   95,   96,

       97,   98,   99,  183,  365,  127,  127,  365,  365,  365,
      129,  129,  289,  289,  289,  130,  130,  241,  365,  365,
      365,  289,  289,  289,  289,  289,   94,   95,   96,   97,
       98,   99,  365,  185,  365,  126,  126,  289,  289,  289,
      289,  289,  289,  298,  126,  300,  127,  127,  365,  365,
      365,  129,  129,  365,  365,  127,  130,  130,  365,  365,
      129,  365,  365,  365,  365,  130,  365,  186,  187,  188,
      189,  190,  191,  290,  290,  290,  126,  365,  365,  301,
      365,  365,  290,  290,  290,  290,  290,  127,  365,  365,
      365,  365,  129,  304,  365,  365,  365,  130,  290,  290,

      290,  290,  290,  290,  291,  291,  291,  126,  365,  365,
      365,  365,  365,  291,  291,  291,  291,  291,  127,  365,
      365,  365,  365,  129,  365,  126,  126,  126,  130,  291,
      291,  291,  291,  291,  291,  183,  127,  127,  127,  126,
      365,  129,  129,  129,  365,  365,  130,  130,  130,  241,
      127,  365,  126,  126,  365,  129,  365,  365,  365,  126,
      130,  302,  365,  127,  127,  185,  126,  303,  129,  129,
      127,  365,  365,  130,  130,  129,  365,  127,  365,  365,
      130,  365,  129,  365,  305,  365,  365,  130,  365,  365,
      365,  365,  365,  307,  126,  126,  292,  292,  292,  186,

      187,  188,  189,  190,  191,  127,  127,  126,  126,  365,
      129,  129,  365,  306,  126,  130,  130,  365,  127,  127,
      308,  126,  365,  129,  129,  127,  365,  365,  130,  130,
      129,  365,  127,  126,  126,  130,  365,  129,  309,  365,
      126,  365,  130,  365,  127,  127,  365,  365,  126,  129,
      129,  127,  365,  365,  130,  130,  129,  311,  365,  127,
      365,  130,  310,  312,  129,  365,  365,  365,  365,  130,
      365,  365,  365,  365,  313,  316,  316,  316,  126,  365,
      365,  365,  365,  365,  316,  316,  316,  316,  316,  127,
      365,   92,  365,  365,  129,  365,  365,  365,  365,  130,

      316,  316,  316,  316,  316,  316,  323,  323,  323,  126,
      365,  365,  365,  365,  365,  323,  323,  323,  323,  323,
      127,   93,  365,  365,  365,  129,  365,  365,  365,  365,
      130,  323,  323,  323,  323,  323,  323,  325,  325,  325,
      365,  365,  365,  365,  365,  365,  325,  325,  325,  325,
      325,  330,  365,  365,  365,   94,   95,   96,   97,   98,
       99,  365,  325,  325,  325,  325,  325,  325,  326,  326,
      326,  126,  365,  365,  365,  365,  365,  326,  326,  326,
      326,  326,  127,  365,  365,  365,  365,  129,  365,  365,
      365,  365,  130,  326,  326,  326,  326,  326,  326,  327,

      327,  327,  126,  365,  365,  365,  365,  365,  327,  327,
      327,  327,  327,  127,  365,  365,  365,  365,  129,  365,
      126,  126,  126,  130,  327,  327,  327,  327,  327,  327,
      183,  127,  127,  127,  126,  126,  129,  129,  129,  365,
      365,  130,  130,  130,  241,  127,  127,  365,  365,  365,
      129,  129,  365,  183,  126,  130,  130,  126,  126,  365,
      185,  126,  331,  332,  333,  127,  365,  241,  127,  127,
      129,  365,  127,  129,  129,  130,  365,  129,  130,  130,
      365,  365,  130,  185,  365,  365,  334,  365,  365,  126,
      126,  247,  247,  247,  186,  187,  188,  189,  190,  191,

      127,  127,  365,  365,  365,  129,  129,  365,  365,  365,
      130,  130,  365,  335,  338,  338,  338,  186,  187,  188,
      189,  190,  191,  338,  338,  338,  338,  338,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  338,
      338,  338,  338,  338,  338,  343,  343,  343,  126,  365,
      365,  365,  365,  365,  343,  343,  343,  343,  343,  127,
      365,  365,  365,  365,  129,  365,  365,  365,  365,  130,
      343,  343,  343,  343,  343,  343,  344,  344,  344,  126,
      365,  365,  365,  365,  365,  344,  344,  344,  344,  344,
      127,  365,  365,  365,  365,  129,  365,  365,  365,  365,

      130,  344,  344,  344,  344,  344,  344,  345,  345,  345,
      126,  365,  365,  365,  365,  365,  345,  345,  345,  345,
      345,  127,   77,  365,  365,  365,  129,  365,   77,  365,
      365,  130,  345,  345,  345,  345,  345,  345,  346,  346,
      346,  126,  365,  365,  365,  365,  365,  346,  346,  346,
      346,  346,  127,  365,  365,   78,  365,  129,  126,  126,
      126,   78,  130,  346,  346,  346,  346,  346,  346,  127,
      127,  127,  365,  365,  129,  129,  129,  365,  365,  130,
      130,  357,  349,  365,  365,  365,  365,  365,  365,   79,
       80,   81,   82,   83,   84,   79,   80,   81,   82,   83,

       84,  352,  352,  352,  365,  365,  365,  365,  365,  365,
      352,  352,  352,  352,  352,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  352,  352,  352,  352,
      352,  352,  353,  353,  353,  365,  365,  365,  365,  365,
      365,  353,  353,  353,  353,  353,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  353,  353,  353,
      353,  353,  353,  354,  354,  354,  365,  183,  365,  365,
      365,  365,  354,  354,  354,  354,  354,  365,  365,  365,
      365,  241,  365,  365,  183,  365,  365,  365,  354,  354,
      354,  354,  354,  354,  360,  360,  360,  185,  241,  365,

      365,  365,  365,  360,  360,  360,  360,  360,  365,  365,
      365,  365,  365,  365,  185,  365,  365,  365,  365,  360,
      360,  360,  360,  360,  360,  365,  365,  365,  365,  365,
      365,  186,  187,  188,  189,  190,  191,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  186,  187,
      188,  189,  190,  191,  363,  363,  363,  365,  365,  365,
      365,  365,  365,  363,  363,  363,  363,  363,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  363,
      363,  363,  363,  363,  363,  364,  364,  364,  365,  365,
      365,  365,  365,  365,  364,  364,  364,  364,  364,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      364,  364,  364,  364,  364,  364,  353,  353,  353,  365,
      365,  365,  365,  365,  365,  353,  353,  353,  353,  353,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  353,  353,  353,  353,  353,  353,   16,   16,   16,
       16,   16,   76,  365,   76,   76,   76,   91,  365,   91,
       91,   91,  108,  108,  108,  108,  108,  121,  121,  128,
      128,  128,  182,  365,  182,  182,  182,   15,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365
    } ;

static yyconst flex_int16_t yy_chk[2456] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    9,   10,    9,
       10,   11,   12,   18,   19,   21,  397,   20,   35,   35,
       11,   12,   25,   22,  396,   20,   11,   12,   20,   76,

       20,   21,   63,   28,   25,   28,   28,   28,   29,   29,
       29,   28,   37,   37,  395,   40,   31,   19,   31,   31,
       31,   40,   32,   22,   32,   32,   32,   51,   18,   36,
       36,  394,   76,  103,  103,  103,  249,  105,   51,  105,
      105,  105,  249,   51,   31,  123,   63,  123,   51,  111,
      111,   19,   19,   19,   19,   19,   19,   22,   22,   22,
       22,   22,   22,  124,  124,   31,   76,   76,   76,   76,
       76,   76,  180,  180,   36,   38,   38,   38,   38,   38,
       38,   38,   38,   38,   38,   38,  107,  107,  107,  393,
       38,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,  392,   45,   46,   48,   39,   44,  110,  132,
      110,  110,  110,  132,   45,   46,   48,  391,   44,   45,
       46,   48,  390,   44,   45,   46,   48,  389,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   44,   44,   44,
       47,  195,  388,  171,   44,  195,   46,   48,   49,   50,
      171,   47,   45,  387,   45,   52,   47,   48,   46,   49,
       50,   47,  386,   53,   49,   50,   52,  385,  384,   49,
       50,   52,   54,  383,   53,   55,   52,  382,   47,   53,
      381,  380,  379,   54,   53,  378,   55,   50,   54,   47,
      377,   55,   56,   54,  376,  375,   55,   49,   52,   49,

       57,   50,  374,   56,   80,  372,   52,  348,   56,   58,
      347,   57,  329,   56,   54,   53,   57,   59,   54,   91,
       58,   57,  328,  318,   60,   58,  317,  295,   59,   55,
       58,   79,   61,   59,   56,   60,  294,   80,   59,  128,
       60,  293,   57,   61,  284,   60,  283,  282,   61,   91,
      128,  281,  251,   61,   58,  128,  250,   57,  244,  236,
      128,  235,  234,   58,   79,  233,  199,  198,   59,   60,
       80,   80,   80,   80,   80,   80,   80,  196,   61,   78,
       81,  172,   78,   91,   91,   91,   91,   91,   91,   82,
      104,   78,  104,  104,  104,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   83,  170,  160,  129,  122,  120,
       78,  116,   78,   81,  115,  108,   78,   78,  104,  100,
       84,   78,   82,   89,   88,   87,   86,   85,   73,   78,
       72,   71,   78,   67,   78,   78,   78,   83,   78,  104,
       43,   33,   30,   26,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   84,   82,   82,   82,   82,   82,   82,
       82,   82,   17,   15,    8,    7,    6,    5,   83,   83,
       83,   83,   83,   83,   83,   83,   83,    4,    3,    0,
        0,    0,    0,  133,   84,    0,    0,   84,   84,   84,
       84,   84,   84,   93,  133,   94,   93,  134,  135,  133,

        0,    0,   95,    0,  133,   93,  138,    0,  134,  135,
        0,   96,  136,  134,  135,    0,    0,  138,  134,  135,
        0,   97,  138,  136,   93,   94,   93,  138,  136,  133,
       93,   93,   95,  136,    0,   93,    0,    0,  134,    0,
        0,   96,  135,   93,  138,    0,   93,    0,   93,   93,
       93,   97,   93,    0,  136,    0,   94,   94,   94,   94,
       94,   94,   94,   94,   94,   95,   95,   95,   95,   95,
       95,   95,   96,   96,   96,   96,   96,   96,   96,   96,
       96,   98,    0,   97,   97,   97,   97,   97,   97,   97,
       97,   99,    0,  139,  140,    0,  137,  114,    0,    0,

        0,    0,    0,  114,  139,  140,    0,  137,    0,  139,
      140,   98,  137,  141,  139,  140,    0,  137,    0,  144,
        0,   99,    0,    0,  141,    0,    0,  114,    0,  141,
      144,    0,    0,    0,  141,  144,  139,    0,    0,    0,
      144,    0,   98,   98,   98,   98,   98,   98,   98,   98,
       98,  137,   99,    0,    0,   99,   99,   99,   99,   99,
       99,  114,  114,  114,  114,  114,  114,  131,  141,    0,
        0,    0,    0,  144,    0,    0,    0,    0,  131,    0,
        0,    0,    0,  131,    0,    0,    0,    0,  131,  131,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  131,

      142,  143,  145,  146,  131,    0,    0,    0,    0,  148,
        0,  142,  143,  145,  146,  147,  142,  143,  145,  146,
      148,  142,  143,  145,  146,  148,  147,  149,  150,    0,
      148,  147,    0,    0,    0,    0,  147,    0,  149,  150,
        0,  142,  151,  149,  150,    0,  152,    0,  149,  150,
      143,    0,    0,  151,  153,  142,  147,  152,  151,    0,
        0,  154,  152,  151,    0,  153,    0,  152,  155,  148,
      153,    0,  154,    0,    0,  153,  149,  154,  167,  155,
      156,    0,  154,  151,  155,    0,    0,  168,  157,  155,
        0,  156,    0,    0,    0,  152,  156,  151,  151,  157,

        0,  156,  158,  154,  157,  177,    0,  153,    0,  157,
        0,  167,  182,  158,    0,    0,    0,    0,  158,    0,
      168,  156,  200,  158,    0,  155,  182,    0,    0,  156,
      157,  178,    0,  200,  157,  177,  156,  183,  200,    0,
        0,    0,  182,  200,  158,  167,  167,  167,  167,  167,
      167,  168,  168,  168,  168,  168,  168,  168,  168,  168,
      200,  178,    0,    0,    0,    0,    0,  183,    0,  177,
      177,  177,  177,  177,  177,    0,  182,  182,  182,  182,
      182,  182,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  178,  178,  178,  178,  178,  178,  178,  178,

      178,  183,  183,  183,  183,  183,  183,  184,    0,  201,
        0,  202,    0,    0,    0,  187,    0,    0,    0,    0,
      201,  184,  202,  203,    0,  201,    0,  202,  189,  187,
      201,    0,  202,    0,  203,  208,    0,  184,  191,  203,
        0,    0,  189,  204,  203,  187,  208,    0,    0,  211,
        0,  208,  191,    0,  204,    0,  208,  202,  189,  204,
      211,  203,    0,    0,  204,  211,    0,    0,  191,    0,
      211,  184,  184,  184,  184,  184,  184,  185,  187,  187,
      187,  187,  187,  187,  187,  204,    0,    0,    0,  185,
      189,  189,  189,  189,  189,  189,  189,  189,    0,  191,

      205,  209,  191,  191,  191,  191,  191,  191,  185,    0,
      185,  205,  209,    0,  185,  185,  205,  209,    0,  185,
        0,  205,  209,    0,    0,    0,    0,  185,    0,    0,
      185,    0,  185,  185,  185,    0,  185,    0,    0,  240,
      206,  207,    0,    0,  185,  185,  185,  185,  185,  185,
      186,  206,  207,    0,  210,  205,  206,  207,  209,    0,
      214,  206,  207,    0,  186,  210,    0,    0,  212,  240,
      210,  214,    0,    0,  213,  210,  214,  215,    0,  212,
      186,  214,    0,  207,  212,  213,  206,  207,  215,  212,
      213,    0,    0,  215,    0,  213,    0,    0,  215,    0,

      240,  240,  240,  240,  240,  240,  240,  240,  240,  210,
        0,  186,  186,  186,  186,  186,  186,  186,  186,  186,
      188,  216,  217,    0,  218,  212,    0,    0,  219,  215,
      213,    0,  216,  217,  188,  218,    0,  216,  217,  219,
      218,  220,  216,  217,  219,  218,    0,  224,    0,  219,
      188,    0,  220,  221,    0,    0,    0,  220,  224,    0,
        0,  216,  220,  224,  221,    0,    0,  218,  224,  221,
      219,    0,    0,  232,  221,    0,  217,    0,    0,  217,
      222,  188,  188,  188,  188,  188,  188,  188,  188,  188,
      190,  222,  220,  224,  223,  221,  222,  225,  226,    0,

      227,  222,    0,    0,  190,  223,  232,    0,  225,  226,
      223,  227,  252,  225,  226,  223,  227,    0,  225,  226,
      190,  227,  222,  252,    0,    0,    0,    0,  252,    0,
        0,    0,    0,  252,    0,    0,  223,  232,  232,  232,
      232,  232,  232,  232,  232,  232,    0,  226,  225,  227,
      241,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      231,    0,    0,    0,  241,    0,    0,  252,    0,    0,
        0,    0,  231,  231,  231,  253,    0,    0,    0,    0,
      241,  231,  231,  231,  231,  231,  253,    0,    0,    0,
        0,  253,  242,  231,    0,    0,  253,  231,  231,  231,

      231,  231,  231,    0,    0,    0,  242,    0,    0,  247,
        0,    0,    0,  288,  241,  241,  241,  241,  241,  241,
      288,    0,  242,  247,  255,  256,  253,  231,  231,  231,
      231,  231,  231,  239,  288,  255,  256,    0,    0,  247,
      255,  256,  239,  239,  239,  255,  256,    0,    0,    0,
      288,  239,  239,  239,  239,  239,  242,  242,  242,  242,
      242,  242,  342,  239,    0,    0,    0,  239,  239,  239,
      239,  239,  239,  247,  247,  247,  247,  247,  247,    0,
      256,    0,    0,    0,  288,  288,  288,  288,  288,  288,
        0,    0,  342,    0,  257,  254,    0,  239,  239,  239,

      239,  239,  239,  243,    0,  257,  254,    0,    0,    0,
      257,  254,  243,  243,  243,  257,  254,  243,    0,    0,
        0,  243,  243,  243,  243,  243,  342,  342,  342,  342,
      342,  342,    0,  243,    0,  258,  259,  243,  243,  243,
      243,  243,  243,  254,  262,  257,  258,  259,    0,    0,
        0,  258,  259,    0,    0,  262,  258,  259,    0,    0,
      262,    0,    0,    0,    0,  262,    0,  243,  243,  243,
      243,  243,  243,  245,  245,  245,  263,    0,    0,  259,
        0,    0,  245,  245,  245,  245,  245,  263,    0,    0,
        0,    0,  263,  262,    0,    0,    0,  263,  245,  245,

      245,  245,  245,  245,  246,  246,  246,  260,    0,    0,
        0,    0,    0,  246,  246,  246,  246,  246,  260,    0,
        0,    0,    0,  260,    0,  261,  264,  265,  260,  246,
      246,  246,  246,  246,  246,  248,  261,  264,  265,  267,
        0,  261,  264,  265,    0,    0,  261,  264,  265,  248,
      267,    0,  266,  268,    0,  267,    0,    0,    0,  270,
      267,  260,    0,  266,  268,  248,  269,  261,  266,  268,
      270,    0,    0,  266,  268,  270,    0,  269,    0,    0,
      270,    0,  269,    0,  265,    0,    0,  269,    0,    0,
        0,    0,    0,  267,  271,  272,  248,  248,  248,  248,

      248,  248,  248,  248,  248,  271,  272,  273,  274,    0,
      271,  272,    0,  266,  275,  271,  272,    0,  273,  274,
      269,  276,    0,  273,  274,  275,    0,    0,  273,  274,
      275,    0,  276,  277,  296,  275,    0,  276,  272,    0,
      297,    0,  276,    0,  277,  296,    0,    0,  298,  277,
      296,  297,    0,    0,  277,  296,  297,  274,    0,  298,
        0,  297,  273,  276,  298,    0,    0,    0,    0,  298,
        0,    0,    0,    0,  277,  280,  280,  280,  299,    0,
        0,    0,    0,    0,  280,  280,  280,  280,  280,  299,
        0,  343,    0,    0,  299,    0,    0,    0,    0,  299,

      280,  280,  280,  280,  280,  280,  287,  287,  287,  300,
        0,    0,    0,    0,    0,  287,  287,  287,  287,  287,
      300,  343,    0,    0,    0,  300,    0,    0,    0,    0,
      300,  287,  287,  287,  287,  287,  287,  289,  289,  289,
        0,    0,    0,    0,    0,    0,  289,  289,  289,  289,
      289,  300,    0,    0,    0,  343,  343,  343,  343,  343,
      343,    0,  289,  289,  289,  289,  289,  289,  290,  290,
      290,  301,    0,    0,    0,    0,    0,  290,  290,  290,
      290,  290,  301,    0,    0,    0,    0,  301,    0,    0,
        0,    0,  301,  290,  290,  290,  290,  290,  290,  291,

      291,  291,  303,    0,    0,    0,    0,    0,  291,  291,
      291,  291,  291,  303,    0,    0,    0,    0,  303,    0,
      302,  304,  305,  303,  291,  291,  291,  291,  291,  291,
      292,  302,  304,  305,  306,  307,  302,  304,  305,    0,
        0,  302,  304,  305,  292,  306,  307,    0,    0,    0,
      306,  307,    0,  324,  308,  306,  307,  309,  310,    0,
      292,  311,  302,  304,  305,  308,    0,  324,  309,  310,
      308,    0,  311,  309,  310,  308,    0,  311,  309,  310,
        0,    0,  311,  324,    0,    0,  307,    0,    0,  312,
      313,  292,  292,  292,  292,  292,  292,  292,  292,  292,

      312,  313,    0,    0,    0,  312,  313,    0,    0,    0,
      312,  313,    0,  310,  316,  316,  316,  324,  324,  324,
      324,  324,  324,  316,  316,  316,  316,  316,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  316,
      316,  316,  316,  316,  316,  323,  323,  323,  331,    0,
        0,    0,    0,    0,  323,  323,  323,  323,  323,  331,
        0,    0,    0,    0,  331,    0,    0,    0,    0,  331,
      323,  323,  323,  323,  323,  323,  325,  325,  325,  332,
        0,    0,    0,    0,    0,  325,  325,  325,  325,  325,
      332,    0,    0,    0,    0,  332,    0,    0,    0,    0,

      332,  325,  325,  325,  325,  325,  325,  326,  326,  326,
      333,    0,    0,    0,    0,    0,  326,  326,  326,  326,
      326,  333,  337,    0,    0,    0,  333,    0,  338,    0,
        0,  333,  326,  326,  326,  326,  326,  326,  327,  327,
      327,  330,    0,    0,    0,    0,    0,  327,  327,  327,
      327,  327,  330,    0,    0,  337,    0,  330,  334,  335,
      349,  338,  330,  327,  327,  327,  327,  327,  327,  334,
      335,  349,    0,    0,  334,  335,  349,    0,    0,  334,
      335,  349,  330,    0,    0,    0,    0,    0,    0,  337,
      337,  337,  337,  337,  337,  338,  338,  338,  338,  338,

      338,  344,  344,  344,    0,    0,    0,    0,    0,    0,
      344,  344,  344,  344,  344,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  344,  344,  344,  344,
      344,  344,  345,  345,  345,    0,    0,    0,    0,    0,
        0,  345,  345,  345,  345,  345,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  345,  345,  345,
      345,  345,  345,  346,  346,  346,    0,  353,    0,    0,
        0,    0,  346,  346,  346,  346,  346,    0,    0,    0,
        0,  353,    0,    0,  354,    0,    0,    0,  346,  346,
      346,  346,  346,  346,  352,  352,  352,  353,  354,    0,

        0,    0,    0,  352,  352,  352,  352,  352,    0,    0,
        0,    0,    0,    0,  354,    0,    0,    0,    0,  352,
      352,  352,  352,  352,  352,    0,    0,    0,    0,    0,
        0,  353,  353,  353,  353,  353,  353,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  354,  354,
      354,  354,  354,  354,  360,  360,  360,    0,    0,    0,
        0,    0,    0,  360,  360,  360,  360,  360,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  360,
      360,  360,  360,  360,  360,  363,  363,  363,    0,    0,
        0,    0,    0,    0,  363,  363,  363,  363,  363,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      363,  363,  363,  363,  363,  363,  364,  364,  364,    0,
        0,    0,    0,    0,    0,  364,  364,  364,  364,  364,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  364,  364,  364,  364,  364,  364,  366,  366,  366,
      366,  366,  367,    0,  367,  367,  367,  368,    0,  368,
      368,  368,  369,  369,  369,  369,  369,  370,  370,  371,
      371,  371,  373,    0,  373,  373,  373,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,

      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365,  365,  365,  365,  365,  365,
      365,  365,  365,  365,  365
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ruby_lexer.ll"
#line 2 "ruby_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2006 Alexander Dymo <adymo@kdevelop.org>                    *
 *                                                                           *
 * Permission is hereby granted, free of charge, to any person obtaining     *
 * a copy of this software and associated documentation files (the           *
 * "Software"), to deal in the Software without restriction, including       *
 * without limitation the rights to use, copy, modify, merge, publish,       *
 * distribute, sublicense, and/or sell copies of the Software, and to        *
 * permit persons to whom the Software is furnished to do so, subject to     *
 * the following conditions:                                                 *
 *                                                                           *
 * The above copyright notice and this permission notice shall be            *
 * included in all copies or substantial portions of the Software.           *
 *                                                                           *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,           *
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF        *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                     *
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE    *
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION    *
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     *
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.           *
 *****************************************************************************/
#line 31 "ruby_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "ruby_lexer.h"







/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
#line 1127 "ruby_lexer.cpp"

#define INITIAL 0
#define expect_hash 1
#define expect_array_access 2
#define expect_leading_colon2 3
#define expect_unary 4
#define expect_operator 5
#define expect_array_arguments 6

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 110 "ruby_lexer.ll"


 /* keywords */

#line 1236 "ruby_lexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 366 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2378 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 114 "ruby_lexer.ll"
{ return parser::Token_END; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "ruby_lexer.ll"
{ return parser::Token_ELSE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "ruby_lexer.ll"
{ return parser::Token_ELSIF; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "ruby_lexer.ll"
{ return parser::Token_RESCUE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "ruby_lexer.ll"
{ return parser::Token_ENSURE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "ruby_lexer.ll"
{ return parser::Token_WHEN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 120 "ruby_lexer.ll"
{ return parser::Token_IF_MODIFIER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "ruby_lexer.ll"
{ return parser::Token_WHILE_MODIFIER; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "ruby_lexer.ll"
{ return parser::Token_UNLESS_MODIFIER; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "ruby_lexer.ll"
{ return parser::Token_UNTIL_MODIFIER; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "ruby_lexer.ll"
{ return parser::Token_RESCUE_MODIFIER; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 125 "ruby_lexer.ll"
{ return parser::Token_UNDEF; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "ruby_lexer.ll"
{ return parser::Token_ALIAS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "ruby_lexer.ll"
{ return parser::Token_BEGIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "ruby_lexer.ll"
{ return parser::Token_DO; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "ruby_lexer.ll"
{ return parser::Token_RETURN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 130 "ruby_lexer.ll"
{ return parser::Token_BREAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 131 "ruby_lexer.ll"
{ return parser::Token_NEXT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 132 "ruby_lexer.ll"
{ return parser::Token_NIL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "ruby_lexer.ll"
{ return parser::Token_TRUE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "ruby_lexer.ll"
{ return parser::Token_FALSE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 135 "ruby_lexer.ll"
{ return parser::Token_FILE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 136 "ruby_lexer.ll"
{ return parser::Token_LINE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "ruby_lexer.ll"
{ return parser::Token_SELF; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 138 "ruby_lexer.ll"
{ return parser::Token_SUPER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "ruby_lexer.ll"
{ return parser::Token_RETRY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "ruby_lexer.ll"
{ return parser::Token_YIELD; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 141 "ruby_lexer.ll"
{ return parser::Token_DEFINED; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "ruby_lexer.ll"
{ return parser::Token_REDO; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "ruby_lexer.ll"
{ return parser::Token_IF; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 144 "ruby_lexer.ll"
{ return parser::Token_CASE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 145 "ruby_lexer.ll"
{ return parser::Token_UNTIL; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 146 "ruby_lexer.ll"
{ return parser::Token_WHILE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 147 "ruby_lexer.ll"
{ return parser::Token_FOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 148 "ruby_lexer.ll"
{ return parser::Token_MODULE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "ruby_lexer.ll"
{ return parser::Token_DEF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 150 "ruby_lexer.ll"
{ return parser::Token_THEN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 151 "ruby_lexer.ll"
{ return parser::Token_CLASS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "ruby_lexer.ll"
{ return parser::Token_UNLESS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "ruby_lexer.ll"
{ return parser::Token_OR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "ruby_lexer.ll"
{ return parser::Token_AND; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "ruby_lexer.ll"
{ return parser::Token_IN; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "ruby_lexer.ll"
{ return parser::Token_END_UPCASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "ruby_lexer.ll"
{ return parser::Token_BEGIN_UPCASE; }
	YY_BREAK
/* strings */
case 45:
YY_RULE_SETUP
#line 161 "ruby_lexer.ll"
{ return parser::Token_SINGLE_QUOTED_STRING; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 162 "ruby_lexer.ll"
{ return parser::Token_DOUBLE_QUOTED_STRING; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "ruby_lexer.ll"
{ return parser::Token_HERE_DOC_BEGIN; }
	YY_BREAK
/* identifiers, function names, constants */
case 48:
YY_RULE_SETUP
#line 167 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "ruby_lexer.ll"
{ return parser::Token_IDENTIFIER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "ruby_lexer.ll"
{ return parser::Token_CONSTANT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "ruby_lexer.ll"
{ return parser::Token_CONSTANT; }
	YY_BREAK
/* numbers */
case 55:
YY_RULE_SETUP
#line 177 "ruby_lexer.ll"
{ return parser::Token_OCTAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "ruby_lexer.ll"
{ return parser::Token_HEX; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 179 "ruby_lexer.ll"
{ return parser::Token_BINARY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 180 "ruby_lexer.ll"
{ return parser::Token_INTEGER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 181 "ruby_lexer.ll"
{ return parser::Token_FLOAT; }
	YY_BREAK
/* operators and punctuation */
case 60:
YY_RULE_SETUP
#line 186 "ruby_lexer.ll"
{ return parser::Token_LPAREN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 187 "ruby_lexer.ll"
{ return parser::Token_RPAREN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 188 "ruby_lexer.ll"
{ return parser::Token_LBRACK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 189 "ruby_lexer.ll"
{ return parser::Token_LBRACK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 190 "ruby_lexer.ll"
{ return parser::Token_RBRACK; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 191 "ruby_lexer.ll"
{ return parser::Token_LCURLY_HASH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 192 "ruby_lexer.ll"
{ return parser::Token_LCURLY_BLOCK; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 193 "ruby_lexer.ll"
{ return parser::Token_COMMA; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 194 "ruby_lexer.ll"
{ return parser::Token_LEADING_TWO_COLON; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 195 "ruby_lexer.ll"
{ return parser::Token_TWO_COLON; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 196 "ruby_lexer.ll"
{ return parser::Token_COLON; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 198 "ruby_lexer.ll"
{ return parser::Token_NOT_EQUAL; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 199 "ruby_lexer.ll"
{ return parser::Token_NOT_MATCH; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 200 "ruby_lexer.ll"
{ return parser::Token_NOT; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 201 "ruby_lexer.ll"
{ return parser::Token_BNOT; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 202 "ruby_lexer.ll"
{ return parser::Token_PLUS_ASSIGN; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 203 "ruby_lexer.ll"
{ return parser::Token_MINUS_ASSIGN; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 204 "ruby_lexer.ll"
{ return parser::Token_POWER_ASSIGN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 205 "ruby_lexer.ll"
{ return parser::Token_STAR_ASSIGN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 206 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_AND_ASSIGN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 207 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_OR_ASSIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 208 "ruby_lexer.ll"
{ return parser::Token_BAND_ASSIGN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 209 "ruby_lexer.ll"
{ return parser::Token_BXOR_ASSIGN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 210 "ruby_lexer.ll"
{ return parser::Token_BOR_ASSIGN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 211 "ruby_lexer.ll"
{ return parser::Token_RIGHT_SHIFT_ASSIGN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 212 "ruby_lexer.ll"
{ return parser::Token_PLUS; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 213 "ruby_lexer.ll"
{ return parser::Token_MINUS; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "ruby_lexer.ll"
{ return parser::Token_POWER; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 215 "ruby_lexer.ll"
{ return parser::Token_STAR; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 216 "ruby_lexer.ll"
{ return parser::Token_COMPARE; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 217 "ruby_lexer.ll"
{ return parser::Token_GREATER_OR_EQUAL; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 218 "ruby_lexer.ll"
{ return parser::Token_LESS_OR_EQUAL; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 219 "ruby_lexer.ll"
{ return parser::Token_RIGHT_SHIFT; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 220 "ruby_lexer.ll"
{ return parser::Token_LESS_THAN; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 221 "ruby_lexer.ll"
{ return parser::Token_GREATER_THAN; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 222 "ruby_lexer.ll"
{ return parser::Token_BXOR; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 223 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_OR; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 224 "ruby_lexer.ll"
{ return parser::Token_BOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 225 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_AND; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 226 "ruby_lexer.ll"
{ return parser::Token_BLOCK_ARG_PREFIX; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "ruby_lexer.ll"
{ return parser::Token_CASE_EQUAL; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "ruby_lexer.ll"
{ return parser::Token_EQUAL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "ruby_lexer.ll"
{ return parser::Token_MATCH; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "ruby_lexer.ll"
{ return parser::Token_ASSOC; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "ruby_lexer.ll"
{ return parser::Token_ASSIGN; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 233 "ruby_lexer.ll"
{ return parser::Token_SEMI; }
	YY_BREAK
case 106:
/* rule 106 can match eol */
YY_RULE_SETUP
#line 235 "ruby_lexer.ll"
{ return parser::Token_LINE_BREAK; }
	YY_BREAK

case 107:
YY_RULE_SETUP
#line 238 "ruby_lexer.ll"
{ return parser::Token_UNARY_PLUS; }
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 239 "ruby_lexer.ll"
{ return parser::Token_UNARY_MINUS; }
	YY_BREAK


case 109:
YY_RULE_SETUP
#line 243 "ruby_lexer.ll"
{ return parser::Token_DIV_ASSIGN; }
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 244 "ruby_lexer.ll"
{ return parser::Token_DIV; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 245 "ruby_lexer.ll"
{ return parser::Token_BAND; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 246 "ruby_lexer.ll"
{ return parser::Token_LEFT_SHIFT; }
	YY_BREAK

case 113:
/* rule 113 can match eol */
YY_RULE_SETUP
#line 249 "ruby_lexer.ll"
{ return parser::Token_REGEX; }
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 253 "ruby_lexer.ll"
ECHO;
	YY_BREAK
#line 1899 "ruby_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(expect_hash):
case YY_STATE_EOF(expect_array_access):
case YY_STATE_EOF(expect_leading_colon2):
case YY_STATE_EOF(expect_unary):
case YY_STATE_EOF(expect_operator):
case YY_STATE_EOF(expect_array_arguments):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 366 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 366 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 365);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 253 "ruby_lexer.ll"



namespace ruby
{

Lexer::Lexer( parser *parser, char *contents )
{
    restart( parser, contents );
}

void Lexer::restart( parser *parser, char *contents )
{
    m_parser = parser;
    m_locationTable = parser->token_stream->location_table();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

} // end of namespace ruby


