#line 2 "ruby_lexer.cpp"

#line 4 "ruby_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 31
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

    /* The c++ scanner is a mess. The FlexLexer.h header file relies on the
     * following macro.
     */
    #define yyFlexLexer yyFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined __STDC_VERSION__ && __STDC_VERSION__ >= 199901L
#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream> 
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{

	std::istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext
#define YY_INTERACTIVE

#include <FlexLexer.h>
int yyFlexLexer::yylex()
	{
	LexerError( "yyFlexLexer::yylex invoked but %option yyclass used" );
	return 0;
	}

#define YY_DECL int ruby::Lexer::yylex()

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 115
#define YY_END_OF_BUFFER 116
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[363] =
    {   0,
       53,   53,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  116,  115,  107,   75,  115,  115,
      112,  115,   60,   61,   90,   87,   68,   88,   72,  111,
       58,   58,   71,  106,   95,  105,   96,   53,   53,   53,
       63,   64,   97,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   66,   99,   67,   76,   65,   62,  115,  108,  109,
      107,   73,   74,    0,   46,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  100,   83,    0,   45,
        0,    0,    0,    0,    0,    0,    0,   89,   80,   77,

        0,   58,   58,   78,   59,    0,  114,  110,   55,    0,
        0,   70,  113,   93,  102,  104,  103,   92,   94,   54,
       53,   53,   53,   84,   51,   49,   52,    0,   50,   52,
       52,   52,   52,   52,   52,   52,   52,   52,   15,   52,
       52,   52,   52,   30,   42,   52,   52,   52,   40,   52,
       52,   52,   52,   52,   52,   52,   52,   85,   98,   69,
        0,    0,    0,    0,    0,    7,    0,    0,    0,   81,
        0,    0,    0,    0,    0,   79,   57,   56,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   91,  101,
       86,   53,   43,   48,   52,   52,   52,   41,   52,   52,

       52,   52,   36,   52,    1,   52,   52,   34,   52,   52,
       19,   52,   52,   52,   52,   52,   52,   52,   52,   52,
       52,   52,   52,   52,   82,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   53,   52,   52,   52,   52,
       52,   31,   52,   52,    2,   52,   52,   52,   52,   18,
       29,   52,   52,   52,   24,   52,   37,   20,   52,   52,
       52,    6,   52,   52,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   44,
       52,   52,   13,   14,   17,   38,   52,    3,   52,   21,

       52,   52,   26,   52,   25,   12,   52,   32,   33,   27,
        0,    0,    0,    0,    0,   10,    8,    0,    0,    0,
       47,    0,    0,    0,   52,   52,   52,    5,   35,    4,
       16,   39,    0,    0,    0,   11,    9,    0,    0,    0,
        0,    0,    0,   52,   52,   52,    0,    0,    0,    0,
        0,   22,   23,   28,    0,    0,    0,    0,    0,    0,
        0,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    2,    2,    2,    2,    2,    2,    2,    3,    4,
        3,    3,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    3,    5,    6,    2,    2,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   20,
       20,   20,   20,   20,   20,   20,   20,   21,   22,   23,
       24,   25,   26,    2,   27,   28,   27,   29,   30,   31,
       32,   33,   34,   33,   33,   35,   33,   36,   33,   33,
       33,   33,   33,   33,   37,   33,   33,   33,   33,   33,
       38,   39,   40,   41,   42,    2,   43,   44,   45,   46,

       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,   52,   59,   60,   61,   62,   63,   64,   65,
       66,   52,   67,   68,   69,   70,    2,   71,   71,   71,
       71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
       71,   71,   71,   72,   72,   72,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,   72,   72,   72,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,   73,   73,   73,   73,   73,   73,   73,   73,   73,
       73,    2,    2,   74,   74,   74,   74,   74,   74,   74,

       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   75,   76,   76,   76,   76,   76,   76,
       76,   76,   76,   76,   76,   76,   76,   76,   76,   77,
       78,   78,   78,   79,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2
    } ;

static yyconst flex_int32_t yy_meta[80] =
    {   0,
        1,    1,    1,    2,    3,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    3,    1,    4,    4,    4,
        3,    1,    1,    1,    1,    3,    4,    4,    4,    4,
        4,    5,    5,    5,    5,    5,    5,    1,    1,    1,
        1,    5,    4,    4,    4,    4,    4,    4,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[395] =
    {   0,
        0,    0,  437,  434,  462,  460,  476,  475,   67,   68,
        0,    0,    0,    0,  495, 2390,   81,   62,   81,   37,
       81,   88, 2390, 2390,   78,  468, 2390,   88,   73,   86,
      103,   95,  457, 2390,   71,  100,   92,  144,  160,   98,
     2390, 2390,  441,  198,  128,  194,  195,  231,  238,  234,
      124,  253,  240,  260,  246,  277,  294,  301,  297,  196,
      314, 2390,   74, 2390, 2390, 2390, 2390,  435, 2390, 2390,
      127, 2390, 2390,  130, 2390,  360,  308,  298,  355,  385,
      396,  405,  407,  407,  397,  402,  427, 2390,  411, 2390,
      485,  438,  484,  493,  510,  534,  565,  425, 2390, 2390,

      119,  535,  313, 2390,  133,  431, 2390,  429,  326,  252,
        0, 2390,  581,  420,  419, 2390, 2390, 2390,  394,    0,
      385,  111,  254, 2390, 2390, 2390,  333,  393, 2390,  656,
      213,  391,  576,  598,  647,  611,  690,  648,  384,  649,
      692,  612,  694,  696,  698,  716,  718,  720,  724,  738,
      742,  744,  750,  751,  764,  788,  790, 2390,  389, 2390,
        0,    0,    0,  362,  755, 2390,  349,  214,  355, 2390,
        0,    0,    0,  766,  778, 2390,  271,    0,  799,  827,
      849,  923,  994,  858, 1065,  870, 1136,  899, 2390, 2390,
     2390,  266,  368, 2390,  361,  359,  843,  866,  988,  989,

      990,  891, 1002, 1003,  894,  895, 1015, 1022, 1030, 1073,
     1074, 1075, 1077, 1092, 1100, 1109, 1107, 1141, 1144, 1145,
     1148, 1163, 1177, 1180, 2390,    0,    0, 1229, 1166,  347,
      343,  337,  316,    0,    0, 1300, 1207, 1213, 1287, 1371,
      344, 1433, 1464, 1293, 1504,  298,  329,  327, 1296, 1387,
     1245, 1333, 1406, 1415, 1407, 1449, 1480, 1498, 1499, 1500,
     1512, 1525, 1526, 1539, 1543, 1545, 1568, 1569, 1581, 1594,
     1595, 1596, 1598, 1618,    0,    0, 1647,  300,  298,  303,
      308,    0,    0, 1678, 1660, 1722, 1753, 1784, 1824,  322,
      320,  318, 1620, 1621, 1622, 1647, 1738, 1800, 1818, 1819,

     1820, 1832, 1833, 1850, 1852, 1856, 1859, 1865, 1888, 1889,
        0,    0, 1902,  296,  279, 2390, 2390,    0,    0, 1933,
     1915, 1977, 2008, 2039,  294,  284, 2055, 1902, 1993, 2024,
     2072, 2073,    0,  460,  983, 2390, 2390,    0, 1641, 2033,
     2095, 2126, 2157,  283,  279, 2074,    0,    0, 2188, 2170,
     2187,    0,    0, 2390,    0,    0, 2249,    0,    0, 2280,
     2311, 2390, 2359, 2364, 2369, 2374, 2376, 2379,  312, 2384,
      308,  304,  291,  283,  281,  276,  269,  259,  238,  233,
      219,  214,  209,  194,  181,  179,  157,  144,  142,  131,
      122,  114,  105,   96

    } ;

static yyconst flex_int16_t yy_def[395] =
    {   0,
      362,    1,  363,  363,  363,  363,  363,  363,  363,  363,
      363,  363,  363,  363,  362,  362,  362,  362,  364,  362,
      362,  365,  362,  362,  362,  362,  362,  362,  362,  366,
      362,  362,  362,  362,  362,  362,  362,  367,  367,   39,
      362,  362,  362,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  364,  362,  362,  364,  364,  364,  364,
      364,  364,  362,  362,  362,  362,  362,  362,  365,  362,
      362,  365,  365,  365,  365,  365,  365,  362,  362,  362,

      362,  362,  362,  362,  362,  366,  362,  366,  362,  362,
      369,  362,  370,  362,  362,  362,  362,  362,  362,  367,
       39,   39,   39,  362,  362,  362,  368,  362,  362,  368,
      130,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  362,  362,  362,
      371,  372,  373,  364,  364,  362,  362,  362,  362,  362,
      374,  375,  376,  365,  365,  362,  362,  369,  370,  370,
      370,  370,  370,  370,  370,  370,  370,  370,  362,  362,
      362,   39,   39,  362,  130,  130,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  362,  377,  378,  364,  364,  362,
      362,  362,  362,  379,  380,  365,  365,  370,  370,  370,
      182,  240,  240,  370,  370,   39,  130,  130,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      368,  368,  368,  368,  381,  382,  228,  362,  362,  362,
      362,  383,  384,  236,  370,  240,  240,  240,  370,   39,
      130,  130,  368,  368,  368,  368,  368,  368,  368,  368,

      368,  368,  368,  368,  368,  368,  368,  368,  368,  368,
      385,  386,  228,  362,  362,  362,  362,  387,  388,  236,
      370,  240,  240,  240,  130,  130,  368,  368,  368,  368,
      368,  368,  389,  364,  364,  362,  362,  390,  365,  365,
      240,  240,  240,  130,  130,  368,  391,  392,  240,  370,
      370,  130,  130,  362,  393,  394,  240,  386,  388,  240,
      240,    0,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362

    } ;

static yyconst flex_int16_t yy_nxt[2470] =
    {   0,
       16,   16,   16,   17,   18,   19,   20,   21,   22,   23,
       24,   25,   26,   27,   28,   29,   30,   31,   32,   32,
       33,   34,   35,   36,   37,   16,   38,   39,   38,   40,
       38,   38,   38,   38,   38,   38,   38,   41,   16,   42,
       43,   44,   45,   46,   47,   48,   49,   50,   51,   51,
       52,   51,   51,   51,   53,   54,   55,   51,   56,   57,
       58,   59,   51,   60,   51,   61,   62,   63,   64,   65,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   69,
       69,   70,   70,   71,   71,   72,   75,   83,   87,   98,
      105,  105,  105,  113,  114,   84,   90,  158,   85,  359,

       86,   99,  107,  101,   88,  102,  103,  103,  358,  108,
      101,  104,  103,  103,  103,  118,  119,  356,  101,   76,
      109,  109,  109,  115,  116,  355,   91,  121,  125,   71,
       71,   73,  125,  123,  348,   75,  105,  105,  105,  126,
      121,  159,  192,  126,  128,  347,  110,  339,  128,  129,
      105,  105,  105,  129,   77,   78,   79,   80,   81,   82,
      338,   92,   93,   94,   95,   96,   97,  111,   76,  117,
      121,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  132,  334,  133,  333,  121,  121,  121,  121,  122,
      121,  121,  121,  121,  121,  121,  121,  319,  125,  125,

      125,  121,  125,   77,   78,   79,   80,   81,   82,  126,
      126,  126,  318,  126,  128,  128,  128,  312,  128,  129,
      129,  129,  311,  129,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  125,  283,  136,  125,  131,
      134,  282,  125,  195,  125,  156,  126,  196,  137,  126,
      125,  128,  135,  126,  128,  126,  129,  125,  128,  129,
      128,  126,  276,  129,  125,  129,  128,  231,  126,  177,
      177,  129,  275,  128,  232,  126,  142,  138,  129,  236,
      128,  125,  193,  121,  235,  129,  234,  139,  177,  177,
      143,  140,  126,  141,  228,  121,  146,  128,  125,  246,

      144,  125,  129,   75,  149,  125,  147,  227,  145,  126,
      148,  226,  126,   75,  128,  178,  126,  128,  125,  129,
      353,  128,  129,  150,  352,  345,  129,  121,  101,  126,
      103,  103,  103,  290,  128,  344,   76,  125,  337,  129,
      151,  101,  336,  109,  109,  109,   76,  326,  126,  325,
      153,  121,  155,  128,  317,  152,  316,  315,  129,  154,
       75,  314,  292,  291,  157,   74,  238,   75,   74,  281,
       77,   77,   78,   79,   80,   81,   82,   74,  164,  164,
      164,   77,   78,   79,   80,   81,   82,  280,  125,  279,
       75,  278,  248,   76,  247,  125,  161,  121,   74,  126,

       76,   75,   74,   74,  128,  233,  126,   74,  230,  129,
       75,  128,  225,  194,  121,   74,  129,  191,   74,   90,
       74,  162,   74,   76,  163,   77,   77,   77,   77,   78,
       79,   80,   81,   82,   76,   77,   78,   79,   80,   81,
       82,  197,  190,   76,  189,  107,   90,  107,  176,   91,
      170,  169,  168,  167,  166,  160,  165,  165,   77,   78,
       79,   80,   81,   82,  124,   75,  165,  165,  165,   77,
       78,   79,   80,   81,   82,  165,   91,  112,   77,   78,
       79,   80,   81,   82,   92,   93,   94,   95,   96,   97,
       89,  100,   90,   89,  362,   68,   68,   67,   76,   67,

       66,   90,   89,   66,  362,  362,  362,  362,  174,  174,
      174,   92,   93,   94,   95,   96,   97,  362,   90,  362,
      362,  171,   91,   89,  362,  362,  362,   89,   89,  362,
      362,   91,   89,   77,   78,   79,   80,   81,   82,  362,
       89,  362,   90,   89,  362,   89,  172,   89,   91,  173,
      101,  362,  109,  109,  109,  362,   92,   92,   93,   94,
       95,   96,   97,   92,   92,   92,   92,   93,   94,   95,
       96,   97,   91,   90,  362,  362,  362,  362,  110,  362,
      125,  175,  175,   92,   93,   94,   95,   96,   97,  180,
      362,  126,  362,  362,  362,  181,  128,  362,  362,  111,

      362,  129,  125,   91,  175,  175,  175,   92,   93,   94,
       95,   96,   97,  126,  362,  125,  125,  362,  128,  182,
      362,  198,  362,  129,  362,  362,  126,  126,  362,  362,
      362,  128,  128,  362,  362,  175,  129,  129,   92,   93,
       94,   95,   96,   97,  362,  362,  199,  362,  362,  362,
      362,  125,  125,  125,  183,  184,  185,  186,  187,  188,
      125,  362,  126,  126,  126,  207,  362,  128,  128,  128,
      201,  126,  129,  129,  129,  362,  128,  362,  362,  362,
      362,  129,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  200,  125,  203,  125,  130,  125,  362,

      125,  362,  125,  362,  362,  126,  362,  126,  204,  126,
      128,  126,  128,  126,  128,  129,  128,  129,  128,  129,
      125,  129,  125,  129,  125,  362,  362,  362,  125,  362,
      362,  126,  202,  126,  362,  126,  128,  205,  128,  126,
      128,  129,  125,  129,  128,  129,  125,  362,  125,  129,
      362,  206,  208,  126,  125,  125,  362,  126,  128,  126,
       75,  209,  128,  129,  128,  126,  126,  129,  125,  129,
      128,  128,  362,  211,   90,  129,  129,  362,  362,  126,
      362,  362,  210,  212,  128,  362,   90,  362,  362,  129,
      362,  362,  125,   76,  125,  215,  217,  213,  214,  362,

      362,  216,  362,  126,   91,  126,  362,  180,  128,  219,
      128,  362,  218,  129,  362,  129,   91,  220,  362,  362,
      362,  238,  362,  362,  221,  229,  229,  229,   77,   78,
       79,   80,   81,   82,  222,  180,  224,  182,  223,   92,
       93,   94,   95,   96,   97,  362,  362,  125,  237,  237,
      237,   92,   93,   94,   95,   96,   97,  180,  126,  362,
      362,  362,  362,  128,  362,  182,  180,  362,  129,  362,
      125,  238,  183,  184,  185,  186,  187,  188,  180,  362,
      238,  126,  362,  362,  362,  249,  128,  182,  362,  362,
      362,  129,  238,  362,  362,  125,  182,  362,  125,  125,

      183,  184,  185,  186,  187,  188,  126,  180,  182,  126,
      126,  128,  362,  362,  128,  128,  129,  362,  362,  129,
      129,  238,  183,  184,  185,  186,  187,  188,  239,  362,
      183,  183,  184,  185,  186,  187,  188,  182,  362,  362,
      239,  245,  245,  183,  184,  185,  186,  187,  188,  362,
      253,  362,  362,  362,  362,  362,  257,  362,  362,  240,
      362,  241,  362,  362,  362,  239,  239,  362,  362,  245,
      239,  362,  183,  184,  185,  186,  187,  188,  239,  362,
      362,  239,  362,  239,  242,  239,  362,  243,   75,  362,
      362,  362,  125,  125,  125,  362,  183,  184,  185,  186,

      187,  188,  180,  126,  126,  126,  125,  125,  128,  128,
      128,  362,  362,  129,  129,  129,  238,  126,  126,  125,
      362,   76,  128,  128,  362,  362,  125,  129,  129,  362,
      126,  251,  182,  362,  125,  128,  252,  126,  250,  362,
      129,  362,  128,  362,  362,  126,  362,  129,  362,  255,
      128,  362,  254,  256,  362,  129,   77,   78,   79,   80,
       81,   82,  362,  362,  244,  244,  244,  183,  184,  185,
      186,  187,  188,  180,  258,  362,  362,  125,  125,  125,
      362,  125,  362,  362,  362,  362,  362,  238,  126,  126,
      126,  259,  126,  128,  128,  128,  125,  128,  129,  129,

      129,  362,  129,  182,  125,  362,  362,  126,  362,  362,
      362,  125,  128,  125,  362,  126,  362,  129,  362,  362,
      128,  262,  126,  362,  126,  129,  362,  128,  362,  128,
      362,  261,  129,  260,  129,  183,  183,  183,  183,  184,
      185,  186,  187,  188,  180,  125,  362,  265,  125,  125,
      263,  362,  125,  264,  362,  266,  126,  362,  238,  126,
      126,  128,  267,  126,  128,  128,  129,  125,  128,  129,
      129,   75,  362,  129,  182,  362,  362,  362,  126,  362,
      362,  125,  362,  128,  125,  362,  362,  268,  129,  362,
      269,  270,  126,  362,  362,  126,  362,  128,  271,  362,

      128,  362,  129,  362,   76,  129,  245,  245,  245,  183,
      184,  185,  186,  187,  188,   90,  362,  362,  272,  362,
      362,  180,  362,  362,  362,  362,  362,  362,  362,  362,
      273,  362,  362,  274,   75,  285,  164,  164,  164,   77,
       78,   79,   80,   81,   82,   91,  277,  277,  277,  125,
      362,  182,  362,  362,  362,  277,  277,  277,  277,  277,
      126,  362,  362,  362,  362,  128,  362,   76,  362,  362,
      129,  277,  277,  277,  277,  277,  277,  174,  174,  174,
       92,   93,   94,   95,   96,   97,  183,  184,  185,  186,
      187,  188,  362,  362,  362,  180,  362,  295,  362,  362,

      125,  180,   77,   78,   79,   80,   81,   82,   90,  238,
      362,  126,  362,  362,  362,  238,  128,  284,  284,  284,
      362,  129,  362,  362,  362,  182,  284,  284,  284,  284,
      284,  182,  362,  362,  362,  362,  362,  125,   91,  362,
      362,  362,  284,  284,  284,  284,  284,  284,  126,  362,
      362,  362,  362,  128,  362,  293,  362,  362,  129,  362,
      183,  184,  185,  186,  187,  188,  183,  184,  185,  186,
      187,  188,  362,   92,   93,   94,   95,   96,   97,  180,
      362,  362,  362,  362,  362,  362,  362,  362,  286,  286,
      286,  125,  362,  238,  362,  362,  362,  286,  286,  286,

      286,  286,  126,  362,  362,  362,  362,  128,  362,  182,
      125,  125,  129,  286,  286,  286,  286,  286,  286,  125,
      362,  126,  126,  362,  362,  362,  128,  128,  362,  362,
      126,  129,  129,  362,  362,  128,  362,  362,  362,  362,
      129,  362,  294,  362,  183,  184,  185,  186,  187,  188,
      287,  287,  287,  125,  362,  362,  362,  362,  362,  287,
      287,  287,  287,  287,  126,  296,  362,  362,  362,  128,
      297,  362,  362,  362,  129,  287,  287,  287,  287,  287,
      287,  288,  288,  288,  125,  362,  362,  362,  362,  362,
      288,  288,  288,  288,  288,  126,  298,  362,  362,  362,

      128,  362,  125,  125,  125,  129,  288,  288,  288,  288,
      288,  288,  180,  126,  126,  126,  125,  362,  128,  128,
      128,  362,  362,  129,  129,  129,  238,  126,  362,  125,
      125,  362,  128,  362,  362,  362,  362,  129,  299,  362,
      126,  126,  182,  125,  300,  128,  128,  125,  362,  125,
      129,  129,  301,  362,  126,  362,  362,  362,  126,  128,
      126,  362,  362,  128,  129,  128,  362,  362,  129,  362,
      129,  362,  125,  125,  289,  289,  289,  183,  184,  185,
      186,  187,  188,  126,  126,  125,  302,  362,  128,  128,
      362,  303,  362,  129,  129,  362,  126,  304,  125,  125,

      125,  128,  125,  305,  362,  362,  129,  362,  362,  126,
      126,  126,  362,  126,  128,  128,  128,  362,  128,  129,
      129,  129,  125,  129,  125,  125,  125,  362,  306,  362,
      362,  362,  362,  126,  362,  126,  126,  126,  128,  362,
      128,  128,  128,  129,  309,  129,  129,  129,  308,   90,
      362,  125,  362,  307,  362,  362,  362,  362,  362,  362,
      321,  362,  126,  310,  313,  313,  313,  128,  180,  362,
      362,  362,  129,  313,  313,  313,  313,  313,  362,   91,
      362,  362,  285,  362,  362,  362,  362,  362,  362,  313,
      313,  313,  313,  313,  313,  320,  320,  320,  182,  362,

      362,  362,  362,  362,  320,  320,  320,  320,  320,  362,
      362,  362,  362,  362,   92,   93,   94,   95,   96,   97,
      320,  320,  320,  320,  320,  320,  362,  362,  362,  362,
      362,  362,  362,  183,  184,  185,  186,  187,  188,  322,
      322,  322,  125,  362,  362,  362,  362,  362,  322,  322,
      322,  322,  322,  126,  362,  362,  362,  362,  128,  362,
      362,  362,  362,  129,  322,  322,  322,  322,  322,  322,
      323,  323,  323,  362,  362,  362,  362,  362,  362,  323,
      323,  323,  323,  323,  327,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  323,  323,  323,  323,  323,

      323,  324,  324,  324,  125,  362,  362,  362,  362,  362,
      324,  324,  324,  324,  324,  126,  362,  362,  362,  362,
      128,  362,  125,  125,  125,  129,  324,  324,  324,  324,
      324,  324,  180,  126,  126,  126,  125,  125,  128,  128,
      128,  362,  362,  129,  129,  129,  238,  126,  126,  362,
      362,  362,  128,  128,  125,  362,  125,  129,  129,  362,
      125,  362,  182,  125,  328,  126,  329,  126,  362,  125,
      128,  126,  128,  362,  126,  129,  128,  129,  330,  128,
      126,  129,  362,  362,  129,  128,  362,  362,  362,  362,
      129,  362,  125,  125,  244,  244,  244,  183,  184,  185,

      186,  187,  188,  126,  126,  331,  125,  362,  128,  128,
      362,  362,  362,  129,  129,  362,  362,  126,  332,  335,
      335,  335,  128,  180,  362,  362,  362,  129,  335,  335,
      335,  335,  335,  362,  362,  362,  362,  238,  362,  362,
      362,  362,  362,  362,  335,  335,  335,  335,  335,  335,
      340,  340,  340,  182,  362,  362,  362,  362,  362,  340,
      340,  340,  340,  340,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  340,  340,  340,  340,  340,
      340,  362,  362,  362,  362,  362,  362,  362,  183,  184,
      185,  186,  187,  188,  341,  341,  341,  125,  362,  362,

      362,  362,  362,  341,  341,  341,  341,  341,  126,  362,
      362,  362,  362,  128,  362,  362,  362,  362,  129,  341,
      341,  341,  341,  341,  341,  342,  342,  342,  125,  362,
      362,  362,  362,  362,  342,  342,  342,  342,  342,  126,
      362,   90,  362,  362,  128,  362,  362,  362,  362,  129,
      342,  342,  342,  342,  342,  342,  343,  343,  343,  125,
      362,  362,  362,  362,  362,  343,  343,  343,  343,  343,
      126,   91,  362,  362,  362,  128,  125,  125,  125,  362,
      129,  343,  343,  343,  343,  343,  343,  126,  126,  126,
      362,  362,  128,  128,  128,  362,  362,  129,  129,  354,

      346,  362,  362,  362,  362,  362,   92,   93,   94,   95,
       96,   97,  349,  349,  349,  362,  362,  362,  362,  362,
      362,  349,  349,  349,  349,  349,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  349,  349,  349,
      349,  349,  349,  350,  350,  350,  362,  362,  362,  362,
      362,  362,  350,  350,  350,  350,  350,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  350,  350,
      350,  350,  350,  350,  351,  351,  351,  362,  180,  362,
      362,  362,  362,  351,  351,  351,  351,  351,  362,  362,
      362,  362,  238,  362,  362,  180,  362,  362,  362,  351,

      351,  351,  351,  351,  351,  357,  357,  357,  182,  238,
      362,  362,  362,  362,  357,  357,  357,  357,  357,  362,
      362,  362,  362,  362,  362,  182,  362,  362,  362,  362,
      357,  357,  357,  357,  357,  357,  362,  362,  362,  362,
      362,  362,  362,  183,  184,  185,  186,  187,  188,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      183,  184,  185,  186,  187,  188,  360,  360,  360,  362,
      362,  362,  362,  362,  362,  360,  360,  360,  360,  360,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  360,  360,  360,  360,  360,  360,  361,  361,  361,

      362,  362,  362,  362,  362,  362,  361,  361,  361,  361,
      361,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  361,  361,  361,  361,  361,  361,  350,  350,
      350,  362,  362,  362,  362,  362,  362,  350,  350,  350,
      350,  350,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  350,  350,  350,  350,  350,  350,   16,
       16,   16,   16,   16,   74,  362,   74,   74,   74,   89,
      362,   89,   89,   89,  106,  106,  106,  106,  106,  120,
      120,  127,  127,  127,  179,  362,  179,  179,  179,   15,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

static yyconst flex_int16_t yy_chk[2470] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    9,
       10,    9,   10,   17,   17,   18,   19,   20,   21,   25,
       29,   29,   29,   35,   35,   20,   22,   63,   20,  394,

       20,   25,   30,   28,   21,   28,   28,   28,  393,   30,
       32,   28,   32,   32,   32,   37,   37,  392,   31,   19,
       31,   31,   31,   36,   36,  391,   22,   40,   51,   71,
       71,   18,   45,   40,  390,   74,  101,  101,  101,   51,
      122,   63,  122,   45,   51,  389,   31,  388,   45,   51,
      105,  105,  105,   45,   19,   19,   19,   19,   19,   19,
      387,   22,   22,   22,   22,   22,   22,   31,   74,   36,
       38,   38,   38,   38,   38,   38,   38,   38,   38,   38,
       38,   45,  386,   45,  385,   38,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   39,   39,  384,   46,   47,

       60,   39,   44,   74,   74,   74,   74,   74,   74,   46,
       47,   60,  383,   44,   46,   47,   60,  382,   44,   46,
       47,   60,  381,   44,   44,   44,   44,   44,   44,   44,
       44,   44,   44,   44,   44,   48,  380,   47,   50,   44,
       46,  379,   49,  131,   53,   60,   48,  131,   47,   50,
       55,   48,   46,   49,   50,   53,   48,   52,   49,   50,
       53,   55,  378,   49,   54,   53,   55,  168,   52,  110,
      110,   55,  377,   52,  168,   54,   50,   48,   52,  376,
       54,   56,  123,  123,  375,   54,  374,   48,  177,  177,
       50,   49,   56,   49,  373,  192,   53,   56,   57,  192,

       52,   59,   56,   78,   55,   58,   54,  372,   52,   57,
       54,  371,   59,   77,   57,  369,   58,   59,   61,   57,
      345,   58,   59,   56,  344,  326,   58,  246,  103,   61,
      103,  103,  103,  246,   61,  325,   78,  127,  315,   61,
       57,  109,  314,  109,  109,  109,   77,  292,  127,  291,
       58,  290,   59,  127,  281,   57,  280,  279,  127,   58,
       79,  278,  248,  247,   61,   76,  241,  164,   76,  233,
       78,   78,   78,   78,   78,   78,   78,   76,   77,   77,
       77,   77,   77,   77,   77,   77,   77,  232,  139,  231,
       80,  230,  196,   79,  195,  132,   76,  193,   76,  139,

      164,   81,   76,   76,  139,  169,  132,   76,  167,  139,
       82,  132,  159,  128,  121,   76,  132,  119,   76,   89,
       76,   76,   76,   80,   76,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   81,  164,  164,  164,  164,  164,
      164,  132,  115,   82,  114,  108,   92,  106,   98,   89,
       87,   86,   85,   84,   83,   68,   80,   80,   80,   80,
       80,   80,   80,   80,   43,  334,   81,   81,   81,   81,
       81,   81,   81,   81,   81,   82,   92,   33,   82,   82,
       82,   82,   82,   82,   89,   89,   89,   89,   89,   89,
       91,   26,   93,   91,   15,    8,    7,    6,  334,    5,

        4,   94,   91,    3,    0,    0,    0,    0,   92,   92,
       92,   92,   92,   92,   92,   92,   92,    0,   95,    0,
        0,   91,   93,   91,    0,    0,    0,   91,   91,    0,
        0,   94,   91,  334,  334,  334,  334,  334,  334,    0,
       91,    0,   96,   91,    0,   91,   91,   91,   95,   91,
      102,    0,  102,  102,  102,    0,   93,   93,   93,   93,
       93,   93,   93,   94,   94,   94,   94,   94,   94,   94,
       94,   94,   96,   97,    0,    0,    0,    0,  102,    0,
      133,   95,   95,   95,   95,   95,   95,   95,   95,  113,
        0,  133,    0,    0,    0,  113,  133,    0,    0,  102,

        0,  133,  134,   97,   96,   96,   96,   96,   96,   96,
       96,   96,   96,  134,    0,  136,  142,    0,  134,  113,
        0,  133,    0,  134,    0,    0,  136,  142,    0,    0,
        0,  136,  142,    0,    0,   97,  136,  142,   97,   97,
       97,   97,   97,   97,    0,    0,  134,    0,    0,    0,
        0,  135,  138,  140,  113,  113,  113,  113,  113,  113,
      130,    0,  135,  138,  140,  142,    0,  135,  138,  140,
      136,  130,  135,  138,  140,    0,  130,    0,    0,    0,
        0,  130,  130,  130,  130,  130,  130,  130,  130,  130,
      130,  130,  130,  135,  137,  138,  141,  130,  143,    0,

      144,    0,  145,    0,    0,  137,    0,  141,  140,  143,
      137,  144,  141,  145,  143,  137,  144,  141,  145,  143,
      146,  144,  147,  145,  148,    0,    0,    0,  149,    0,
        0,  146,  137,  147,    0,  148,  146,  141,  147,  149,
      148,  146,  150,  147,  149,  148,  151,    0,  152,  149,
        0,  141,  143,  150,  153,  154,    0,  151,  150,  152,
      165,  146,  151,  150,  152,  153,  154,  151,  155,  152,
      153,  154,    0,  148,  174,  153,  154,    0,    0,  155,
        0,    0,  147,  150,  155,    0,  175,    0,    0,  155,
        0,    0,  156,  165,  157,  151,  153,  150,  150,    0,

        0,  152,    0,  156,  174,  157,    0,  179,  156,  155,
      157,    0,  154,  156,    0,  157,  175,  155,    0,    0,
        0,  179,    0,    0,  155,  165,  165,  165,  165,  165,
      165,  165,  165,  165,  156,  180,  157,  179,  156,  174,
      174,  174,  174,  174,  174,    0,    0,  197,  175,  175,
      175,  175,  175,  175,  175,  175,  175,  181,  197,    0,
        0,    0,    0,  197,    0,  180,  184,    0,  197,    0,
      198,  181,  179,  179,  179,  179,  179,  179,  186,    0,
      184,  198,    0,    0,    0,  197,  198,  181,    0,    0,
        0,  198,  186,    0,    0,  202,  184,    0,  205,  206,

      180,  180,  180,  180,  180,  180,  202,  188,  186,  205,
      206,  202,    0,    0,  205,  206,  202,    0,    0,  205,
      206,  188,  181,  181,  181,  181,  181,  181,  182,    0,
      184,  184,  184,  184,  184,  184,  184,  188,    0,    0,
      182,  186,  186,  186,  186,  186,  186,  186,  186,    0,
      202,    0,    0,    0,    0,    0,  206,    0,    0,  182,
        0,  182,    0,    0,    0,  182,  182,    0,    0,  188,
      182,    0,  188,  188,  188,  188,  188,  188,  182,    0,
        0,  182,    0,  182,  182,  182,    0,  182,  335,    0,
        0,    0,  199,  200,  201,    0,  182,  182,  182,  182,

      182,  182,  183,  199,  200,  201,  203,  204,  199,  200,
      201,    0,    0,  199,  200,  201,  183,  203,  204,  207,
        0,  335,  203,  204,    0,    0,  208,  203,  204,    0,
      207,  200,  183,    0,  209,  207,  201,  208,  199,    0,
      207,    0,  208,    0,    0,  209,    0,  208,    0,  204,
      209,    0,  203,  204,    0,  209,  335,  335,  335,  335,
      335,  335,    0,    0,  183,  183,  183,  183,  183,  183,
      183,  183,  183,  185,  207,    0,    0,  210,  211,  212,
        0,  213,    0,    0,    0,    0,    0,  185,  210,  211,
      212,  209,  213,  210,  211,  212,  214,  213,  210,  211,

      212,    0,  213,  185,  215,    0,    0,  214,    0,    0,
        0,  217,  214,  216,    0,  215,    0,  214,    0,    0,
      215,  213,  217,    0,  216,  215,    0,  217,    0,  216,
        0,  212,  217,  210,  216,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  187,  218,    0,  215,  219,  220,
      214,    0,  221,  214,    0,  216,  218,    0,  187,  219,
      220,  218,  217,  221,  219,  220,  218,  222,  221,  219,
      220,  229,    0,  221,  187,    0,    0,    0,  222,    0,
        0,  223,    0,  222,  224,    0,    0,  218,  222,    0,
      219,  220,  223,    0,    0,  224,    0,  223,  221,    0,

      224,    0,  223,    0,  229,  224,  187,  187,  187,  187,
      187,  187,  187,  187,  187,  237,    0,    0,  222,    0,
        0,  238,    0,    0,    0,    0,    0,    0,    0,    0,
      223,    0,    0,  224,  228,  238,  229,  229,  229,  229,
      229,  229,  229,  229,  229,  237,  228,  228,  228,  251,
        0,  238,    0,    0,    0,  228,  228,  228,  228,  228,
      251,    0,    0,    0,    0,  251,    0,  228,    0,    0,
      251,  228,  228,  228,  228,  228,  228,  237,  237,  237,
      237,  237,  237,  237,  237,  237,  238,  238,  238,  238,
      238,  238,    0,    0,    0,  239,    0,  251,    0,    0,

      249,  244,  228,  228,  228,  228,  228,  228,  236,  239,
        0,  249,    0,    0,    0,  244,  249,  236,  236,  236,
        0,  249,    0,    0,    0,  239,  236,  236,  236,  236,
      236,  244,    0,    0,    0,    0,    0,  252,  236,    0,
        0,    0,  236,  236,  236,  236,  236,  236,  252,    0,
        0,    0,    0,  252,    0,  249,    0,    0,  252,    0,
      239,  239,  239,  239,  239,  239,  244,  244,  244,  244,
      244,  244,    0,  236,  236,  236,  236,  236,  236,  240,
        0,    0,    0,    0,    0,    0,    0,    0,  240,  240,
      240,  250,    0,  240,    0,    0,    0,  240,  240,  240,

      240,  240,  250,    0,    0,    0,    0,  250,    0,  240,
      253,  255,  250,  240,  240,  240,  240,  240,  240,  254,
        0,  253,  255,    0,    0,    0,  253,  255,    0,    0,
      254,  253,  255,    0,    0,  254,    0,    0,    0,    0,
      254,    0,  250,    0,  240,  240,  240,  240,  240,  240,
      242,  242,  242,  256,    0,    0,    0,    0,    0,  242,
      242,  242,  242,  242,  256,  253,    0,    0,    0,  256,
      254,    0,    0,    0,  256,  242,  242,  242,  242,  242,
      242,  243,  243,  243,  257,    0,    0,    0,    0,    0,
      243,  243,  243,  243,  243,  257,  256,    0,    0,    0,

      257,    0,  258,  259,  260,  257,  243,  243,  243,  243,
      243,  243,  245,  258,  259,  260,  261,    0,  258,  259,
      260,    0,    0,  258,  259,  260,  245,  261,    0,  262,
      263,    0,  261,    0,    0,    0,    0,  261,  257,    0,
      262,  263,  245,  264,  258,  262,  263,  265,    0,  266,
      262,  263,  259,    0,  264,    0,    0,    0,  265,  264,
      266,    0,    0,  265,  264,  266,    0,    0,  265,    0,
      266,    0,  267,  268,  245,  245,  245,  245,  245,  245,
      245,  245,  245,  267,  268,  269,  262,    0,  267,  268,
        0,  263,    0,  267,  268,    0,  269,  264,  270,  271,

      272,  269,  273,  266,    0,    0,  269,    0,    0,  270,
      271,  272,    0,  273,  270,  271,  272,    0,  273,  270,
      271,  272,  274,  273,  293,  294,  295,    0,  269,    0,
        0,    0,    0,  274,    0,  293,  294,  295,  274,    0,
      293,  294,  295,  274,  273,  293,  294,  295,  271,  339,
        0,  296,    0,  270,    0,    0,    0,    0,    0,    0,
      285,    0,  296,  274,  277,  277,  277,  296,  285,    0,
        0,    0,  296,  277,  277,  277,  277,  277,    0,  339,
        0,    0,  285,    0,    0,    0,    0,    0,    0,  277,
      277,  277,  277,  277,  277,  284,  284,  284,  285,    0,

        0,    0,    0,    0,  284,  284,  284,  284,  284,    0,
        0,    0,    0,    0,  339,  339,  339,  339,  339,  339,
      284,  284,  284,  284,  284,  284,    0,    0,    0,    0,
        0,    0,    0,  285,  285,  285,  285,  285,  285,  286,
      286,  286,  297,    0,    0,    0,    0,    0,  286,  286,
      286,  286,  286,  297,    0,    0,    0,    0,  297,    0,
        0,    0,    0,  297,  286,  286,  286,  286,  286,  286,
      287,  287,  287,    0,    0,    0,    0,    0,    0,  287,
      287,  287,  287,  287,  297,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  287,  287,  287,  287,  287,

      287,  288,  288,  288,  298,    0,    0,    0,    0,    0,
      288,  288,  288,  288,  288,  298,    0,    0,    0,    0,
      298,    0,  299,  300,  301,  298,  288,  288,  288,  288,
      288,  288,  289,  299,  300,  301,  302,  303,  299,  300,
      301,    0,    0,  299,  300,  301,  289,  302,  303,    0,
        0,    0,  302,  303,  304,    0,  305,  302,  303,    0,
      306,    0,  289,  307,  299,  304,  301,  305,    0,  308,
      304,  306,  305,    0,  307,  304,  306,  305,  302,  307,
      308,  306,    0,    0,  307,  308,    0,    0,    0,    0,
      308,    0,  309,  310,  289,  289,  289,  289,  289,  289,

      289,  289,  289,  309,  310,  304,  328,    0,  309,  310,
        0,    0,    0,  309,  310,    0,    0,  328,  307,  313,
      313,  313,  328,  321,    0,    0,    0,  328,  313,  313,
      313,  313,  313,    0,    0,    0,    0,  321,    0,    0,
        0,    0,    0,    0,  313,  313,  313,  313,  313,  313,
      320,  320,  320,  321,    0,    0,    0,    0,    0,  320,
      320,  320,  320,  320,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  320,  320,  320,  320,  320,
      320,    0,    0,    0,    0,    0,    0,    0,  321,  321,
      321,  321,  321,  321,  322,  322,  322,  329,    0,    0,

        0,    0,    0,  322,  322,  322,  322,  322,  329,    0,
        0,    0,    0,  329,    0,    0,    0,    0,  329,  322,
      322,  322,  322,  322,  322,  323,  323,  323,  330,    0,
        0,    0,    0,    0,  323,  323,  323,  323,  323,  330,
        0,  340,    0,    0,  330,    0,    0,    0,    0,  330,
      323,  323,  323,  323,  323,  323,  324,  324,  324,  327,
        0,    0,    0,    0,    0,  324,  324,  324,  324,  324,
      327,  340,    0,    0,    0,  327,  331,  332,  346,    0,
      327,  324,  324,  324,  324,  324,  324,  331,  332,  346,
        0,    0,  331,  332,  346,    0,    0,  331,  332,  346,

      327,    0,    0,    0,    0,    0,  340,  340,  340,  340,
      340,  340,  341,  341,  341,    0,    0,    0,    0,    0,
        0,  341,  341,  341,  341,  341,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  341,  341,  341,
      341,  341,  341,  342,  342,  342,    0,    0,    0,    0,
        0,    0,  342,  342,  342,  342,  342,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  342,  342,
      342,  342,  342,  342,  343,  343,  343,    0,  350,    0,
        0,    0,    0,  343,  343,  343,  343,  343,    0,    0,
        0,    0,  350,    0,    0,  351,    0,    0,    0,  343,

      343,  343,  343,  343,  343,  349,  349,  349,  350,  351,
        0,    0,    0,    0,  349,  349,  349,  349,  349,    0,
        0,    0,    0,    0,    0,  351,    0,    0,    0,    0,
      349,  349,  349,  349,  349,  349,    0,    0,    0,    0,
        0,    0,    0,  350,  350,  350,  350,  350,  350,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      351,  351,  351,  351,  351,  351,  357,  357,  357,    0,
        0,    0,    0,    0,    0,  357,  357,  357,  357,  357,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  357,  357,  357,  357,  357,  357,  360,  360,  360,

        0,    0,    0,    0,    0,    0,  360,  360,  360,  360,
      360,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  360,  360,  360,  360,  360,  360,  361,  361,
      361,    0,    0,    0,    0,    0,    0,  361,  361,  361,
      361,  361,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  361,  361,  361,  361,  361,  361,  363,
      363,  363,  363,  363,  364,    0,  364,  364,  364,  365,
        0,  365,  365,  365,  366,  366,  366,  366,  366,  367,
      367,  368,  368,  368,  370,    0,  370,  370,  370,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,

      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362,  362,
      362,  362,  362,  362,  362,  362,  362,  362,  362
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "ruby_lexer.ll"
#line 2 "ruby_lexer.ll"
/*****************************************************************************
 * Copyright (c) 2006 Alexander Dymo <adymo@kdevelop.org>                    *
 *                                                                           *
 * Permission is hereby granted, free of charge, to any person obtaining     *
 * a copy of this software and associated documentation files (the           *
 * "Software"), to deal in the Software without restriction, including       *
 * without limitation the rights to use, copy, modify, merge, publish,       *
 * distribute, sublicense, and/or sell copies of the Software, and to        *
 * permit persons to whom the Software is furnished to do so, subject to     *
 * the following conditions:                                                 *
 *                                                                           *
 * The above copyright notice and this permission notice shall be            *
 * included in all copies or substantial portions of the Software.           *
 *                                                                           *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,           *
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF        *
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND                     *
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE    *
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION    *
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION     *
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.           *
 *****************************************************************************/
#line 31 "ruby_lexer.ll"

#define DONT_INCLUDE_FLEXLEXER
#include "ruby_lexer.h"







/* UTF-8 sequences, generated with the Unicode.hs script from
* http://lists.gnu.org/archive/html/help-flex/2005-01/msg00043.html */
/* 0x0041-0x005a, 0x005f, 0x0061-0x007a: one byte in UTF-8 */
/* 0x00c0-0x00d6, 0x00d8-0x00f6, 0x00f8-0x00ff */
/* 0x0100-0x1fff */
/* 0x3040-0x318f */
/* 0x3300-0x337f */
/* 0x3400-0x3d2d */
/* 0x4e00-0x9fff */
/* 0xf900-0xfaff */
/* 0x0080-0xffff */
/* 0x10000-0x10ffff */
/* Unicode characters above 0x10ffff are not supported by C#. */
/* Any multi-byte Unicode character. Single-byte ones are just . in lex. */
/* 0x2028 and 0x2029, currently unused in this lexer
for performance and convenience reasons. */
#line 1129 "ruby_lexer.cpp"

#define INITIAL 0
#define expect_hash 1
#define expect_array_access 2
#define expect_leading_colon2 3
#define expect_unary 4
#define expect_operator 5
#define expect_array_arguments 6

/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
\
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 110 "ruby_lexer.ll"


 /* keywords */

#line 1238 "ruby_lexer.cpp"

	if ( (yy_init) )
		{
		(yy_init) = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = & std::cin;

		if ( ! yyout )
			yyout = & std::cout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 363 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 2390 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 114 "ruby_lexer.ll"
{ return parser::Token_END; }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 115 "ruby_lexer.ll"
{ return parser::Token_ELSE; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 116 "ruby_lexer.ll"
{ return parser::Token_ELSIF; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 117 "ruby_lexer.ll"
{ return parser::Token_RESCUE; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 118 "ruby_lexer.ll"
{ return parser::Token_ENSURE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 119 "ruby_lexer.ll"
{ return parser::Token_WHEN; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 120 "ruby_lexer.ll"
{ return parser::Token_IF_MODIFIER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 121 "ruby_lexer.ll"
{ return parser::Token_WHILE_MODIFIER; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 122 "ruby_lexer.ll"
{ return parser::Token_UNLESS_MODIFIER; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 123 "ruby_lexer.ll"
{ return parser::Token_UNTIL_MODIFIER; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 124 "ruby_lexer.ll"
{ return parser::Token_RESCUE_MODIFIER; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 125 "ruby_lexer.ll"
{ return parser::Token_UNDEF; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 126 "ruby_lexer.ll"
{ return parser::Token_ALIAS; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 127 "ruby_lexer.ll"
{ return parser::Token_BEGIN; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 128 "ruby_lexer.ll"
{ return parser::Token_DO; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 129 "ruby_lexer.ll"
{ return parser::Token_RETURN; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 130 "ruby_lexer.ll"
{ return parser::Token_BREAK; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 131 "ruby_lexer.ll"
{ return parser::Token_NEXT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 132 "ruby_lexer.ll"
{ return parser::Token_NIL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 133 "ruby_lexer.ll"
{ return parser::Token_TRUE; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 134 "ruby_lexer.ll"
{ return parser::Token_FALSE; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 135 "ruby_lexer.ll"
{ return parser::Token_FILE; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 136 "ruby_lexer.ll"
{ return parser::Token_LINE; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 137 "ruby_lexer.ll"
{ return parser::Token_SELF; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 138 "ruby_lexer.ll"
{ return parser::Token_SUPER; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 139 "ruby_lexer.ll"
{ return parser::Token_RETRY; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 140 "ruby_lexer.ll"
{ return parser::Token_YIELD; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 141 "ruby_lexer.ll"
{ return parser::Token_DEFINED; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 142 "ruby_lexer.ll"
{ return parser::Token_REDO; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 143 "ruby_lexer.ll"
{ return parser::Token_IF; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 144 "ruby_lexer.ll"
{ return parser::Token_CASE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 145 "ruby_lexer.ll"
{ return parser::Token_UNTIL; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 146 "ruby_lexer.ll"
{ return parser::Token_WHILE; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 147 "ruby_lexer.ll"
{ return parser::Token_FOR; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 148 "ruby_lexer.ll"
{ return parser::Token_MODULE; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 149 "ruby_lexer.ll"
{ return parser::Token_DEF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 150 "ruby_lexer.ll"
{ return parser::Token_THEN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 151 "ruby_lexer.ll"
{ return parser::Token_CLASS; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 152 "ruby_lexer.ll"
{ return parser::Token_UNLESS; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 153 "ruby_lexer.ll"
{ return parser::Token_OR; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 154 "ruby_lexer.ll"
{ return parser::Token_AND; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 155 "ruby_lexer.ll"
{ return parser::Token_IN; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 156 "ruby_lexer.ll"
{ return parser::Token_END_UPCASE; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 157 "ruby_lexer.ll"
{ return parser::Token_BEGIN_UPCASE; }
	YY_BREAK
/* strings */
case 45:
YY_RULE_SETUP
#line 161 "ruby_lexer.ll"
{ return parser::Token_SINGLE_QUOTED_STRING; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 162 "ruby_lexer.ll"
{ return parser::Token_DOUBLE_QUOTED_STRING; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "ruby_lexer.ll"
{ return parser::Token_HERE_DOC_BEGIN; }
	YY_BREAK
/* identifiers, function names, constants */
case 48:
YY_RULE_SETUP
#line 167 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 168 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 169 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 170 "ruby_lexer.ll"
{ return parser::Token_FUNCTION; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 171 "ruby_lexer.ll"
{ return parser::Token_IDENTIFIER; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 172 "ruby_lexer.ll"
{ return parser::Token_CONSTANT; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 173 "ruby_lexer.ll"
{ return parser::Token_CONSTANT; }
	YY_BREAK
/* numbers */
case 55:
YY_RULE_SETUP
#line 177 "ruby_lexer.ll"
{ return parser::Token_OCTAL; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 178 "ruby_lexer.ll"
{ return parser::Token_HEX; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 179 "ruby_lexer.ll"
{ return parser::Token_BINARY; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 180 "ruby_lexer.ll"
{ return parser::Token_INTEGER; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 181 "ruby_lexer.ll"
{ return parser::Token_FLOAT; }
	YY_BREAK
/* operators and punctuation */
case 60:
YY_RULE_SETUP
#line 186 "ruby_lexer.ll"
{ return parser::Token_LPAREN; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 187 "ruby_lexer.ll"
{ return parser::Token_RPAREN; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 188 "ruby_lexer.ll"
{ return parser::Token_LBRACK; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 189 "ruby_lexer.ll"
{ return parser::Token_LBRACK; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 190 "ruby_lexer.ll"
{ return parser::Token_RBRACK; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 191 "ruby_lexer.ll"
{ return parser::Token_LCURLY_HASH; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 192 "ruby_lexer.ll"
{ return parser::Token_LCURLY_BLOCK; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 193 "ruby_lexer.ll"
{ return parser::Token_RCURLY; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 194 "ruby_lexer.ll"
{ return parser::Token_COMMA; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 195 "ruby_lexer.ll"
{ return parser::Token_LEADING_TWO_COLON; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 196 "ruby_lexer.ll"
{ return parser::Token_TWO_COLON; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 197 "ruby_lexer.ll"
{ return parser::Token_COLON; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 198 "ruby_lexer.ll"
{ return parser::Token_DOT; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 200 "ruby_lexer.ll"
{ return parser::Token_NOT_EQUAL; }
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 201 "ruby_lexer.ll"
{ return parser::Token_NOT_MATCH; }
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 202 "ruby_lexer.ll"
{ return parser::Token_NOT; }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 203 "ruby_lexer.ll"
{ return parser::Token_BNOT; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 204 "ruby_lexer.ll"
{ return parser::Token_PLUS_ASSIGN; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 205 "ruby_lexer.ll"
{ return parser::Token_MINUS_ASSIGN; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 206 "ruby_lexer.ll"
{ return parser::Token_POWER_ASSIGN; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 207 "ruby_lexer.ll"
{ return parser::Token_STAR_ASSIGN; }
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 208 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_AND_ASSIGN; }
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 209 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_OR_ASSIGN; }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 210 "ruby_lexer.ll"
{ return parser::Token_BAND_ASSIGN; }
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 211 "ruby_lexer.ll"
{ return parser::Token_BXOR_ASSIGN; }
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 212 "ruby_lexer.ll"
{ return parser::Token_BOR_ASSIGN; }
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 213 "ruby_lexer.ll"
{ return parser::Token_RIGHT_SHIFT_ASSIGN; }
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 214 "ruby_lexer.ll"
{ return parser::Token_PLUS; }
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 215 "ruby_lexer.ll"
{ return parser::Token_MINUS; }
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 216 "ruby_lexer.ll"
{ return parser::Token_POWER; }
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 217 "ruby_lexer.ll"
{ return parser::Token_STAR; }
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 218 "ruby_lexer.ll"
{ return parser::Token_COMPARE; }
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 219 "ruby_lexer.ll"
{ return parser::Token_GREATER_OR_EQUAL; }
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 220 "ruby_lexer.ll"
{ return parser::Token_LESS_OR_EQUAL; }
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 221 "ruby_lexer.ll"
{ return parser::Token_RIGHT_SHIFT; }
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 222 "ruby_lexer.ll"
{ return parser::Token_LESS_THAN; }
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 223 "ruby_lexer.ll"
{ return parser::Token_GREATER_THAN; }
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 224 "ruby_lexer.ll"
{ return parser::Token_BXOR; }
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 225 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_OR; }
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 226 "ruby_lexer.ll"
{ return parser::Token_BOR; }
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 227 "ruby_lexer.ll"
{ return parser::Token_LOGICAL_AND; }
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 228 "ruby_lexer.ll"
{ return parser::Token_CASE_EQUAL; }
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 229 "ruby_lexer.ll"
{ return parser::Token_EQUAL; }
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 230 "ruby_lexer.ll"
{ return parser::Token_MATCH; }
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 231 "ruby_lexer.ll"
{ return parser::Token_ASSOC; }
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 232 "ruby_lexer.ll"
{ return parser::Token_ASSIGN; }
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 234 "ruby_lexer.ll"
{ return parser::Token_SEMI; }
	YY_BREAK
case 107:
/* rule 107 can match eol */
YY_RULE_SETUP
#line 236 "ruby_lexer.ll"
{ return parser::Token_LINE_BREAK; }
	YY_BREAK

case 108:
YY_RULE_SETUP
#line 239 "ruby_lexer.ll"
{ return parser::Token_UNARY_PLUS; }
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 240 "ruby_lexer.ll"
{ return parser::Token_UNARY_MINUS; }
	YY_BREAK

case 110:
YY_RULE_SETUP
#line 243 "ruby_lexer.ll"
{ return parser::Token_DIV_ASSIGN; }
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 244 "ruby_lexer.ll"
{ return parser::Token_DIV; }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 245 "ruby_lexer.ll"
{ return parser::Token_BAND; }
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 246 "ruby_lexer.ll"
{ return parser::Token_LEFT_SHIFT; }
	YY_BREAK
case 114:
/* rule 114 can match eol */
YY_RULE_SETUP
#line 248 "ruby_lexer.ll"
{ return parser::Token_REGEX; }
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 252 "ruby_lexer.ll"
ECHO;
	YY_BREAK
#line 1904 "ruby_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(expect_hash):
case YY_STATE_EOF(expect_array_access):
case YY_STATE_EOF(expect_leading_colon2):
case YY_STATE_EOF(expect_unary):
case YY_STATE_EOF(expect_operator):
case YY_STATE_EOF(expect_array_arguments):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer( std::istream* arg_yyin, std::ostream* arg_yyout )
{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;

	yy_state_buf = 0;

}

yyFlexLexer::~yyFlexLexer()
{
	delete [] yy_state_buf;
	yyfree(yy_start_stack  );
	yy_delete_buffer( YY_CURRENT_BUFFER );
}

void yyFlexLexer::switch_streams( std::istream* new_in, std::ostream* new_out )
{
	if ( new_in )
		{
		yy_delete_buffer( YY_CURRENT_BUFFER );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE  ) );
		}

	if ( new_out )
		yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput( const char* buf, int size )
{
	(void) yyout->write( buf, size );
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    yy_state_type yyFlexLexer::yy_get_previous_state()
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 2);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 363 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 2;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 363 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 362);

	return yy_is_jam ? 0 : yy_current_state;
}

    void yyFlexLexer::yyunput( int c, register char* yy_bp)
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

    int yyFlexLexer::yyinput()
{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyFlexLexer::yyrestart( std::istream* input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

    void yyFlexLexer::yy_load_buffer_state()
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( std::istream* file, int size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

extern "C" int isatty (int );

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, std::istream* file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

	b->yy_is_interactive = 0;
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yyFlexLexer::yypush_buffer_state (YY_BUFFER_STATE new_buffer)
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yyFlexLexer::yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

    void yyFlexLexer::yy_push_state( int new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    void yyFlexLexer::yy_pop_state()
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    int yyFlexLexer::yy_top_state()
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError( yyconst char msg[] )
{
    	std::cerr << msg << std::endl;
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
    	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
    	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 252 "ruby_lexer.ll"



namespace ruby
{

Lexer::Lexer( parser *parser, char *contents )
{
    restart( parser, contents );
}

void Lexer::restart( parser *parser, char *contents )
{
    m_parser = parser;
    m_locationTable = parser->token_stream->location_table();
    m_contents = contents;
    m_tokenBegin = m_tokenEnd = 0;
    m_currentOffset = 0;

    // check for and ignore the UTF-8 byte order mark
    unsigned char *ucontents = (unsigned char *) m_contents;
    if ( ucontents[0] == 0xEF && ucontents[1] == 0xBB && ucontents[2] == 0xBF )
    {
        m_tokenBegin = m_tokenEnd = 3;
        m_currentOffset = 3;
    }

    yyrestart(NULL);
    BEGIN(INITIAL); // is not set automatically by yyrestart()
}

// reads a character, and returns 1 as the number of characters read
// (or 0 when the end of the string is reached)
int Lexer::LexerInput( char *buf, int /*max_size*/ )
{
    int c = m_contents[ m_currentOffset++ ];

    switch(c)
    {
    case '\r':
        c = '\n'; // only have one single line break character: '\n'
        if ( m_contents[m_currentOffset + 1] == '\n' )
        {
            m_currentOffset++;
            m_tokenEnd++;
        }

        // fall through
    case '\n':
        m_locationTable->newline( m_currentOffset );
        break;

    default:
        break;
    }

    return (c == 0) ? 0 : (buf[0] = c, 1);
}

} // end of namespace ruby


