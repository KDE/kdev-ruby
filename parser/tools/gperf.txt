%{
struct kwtable {const char *name; int id[2]; enum lex_state_e state;};
const struct kwtable *rb_reserved_word(const char *, unsigned int);
static const struct kwtable *reserved_word(const char *, unsigned int);
#define rb_reserved_word(str, len) reserved_word(str, len)
%}

struct kwtable;
%%
__ENCODING__, {tENCODING, tENCODING}, EXPR_END
__LINE__, {tLINE, tLINE}, EXPR_END
__FILE__, {tFILE, tFILE}, EXPR_END
BEGIN, {upBEGIN, upBEGIN}, EXPR_END
END, {upEND, upEND}, EXPR_END
alias, {tALIAS, tALIAS}, EXPR_FNAME
and, {tKWAND, tKWAND}, EXPR_VALUE
begin, {tBEGIN, tBEGIN}, EXPR_BEG
break, {tBREAK, tBREAK}, EXPR_MID
case, {tCASE, tCASE}, EXPR_VALUE
class, {tCLASS, tCLASS}, EXPR_CLASS
def, {tDEF, tDEF}, EXPR_FNAME
defined?, {tDEFINED, tDEFINED}, EXPR_ARG
do, {tDO, tDO}, EXPR_BEG
else, {tELSE, tELSE}, EXPR_BEG
elsif, {tELSIF, tELSIF}, EXPR_VALUE
end, {tEND, tEND}, EXPR_END
ensure, {tENSURE, tENSURE}, EXPR_BEG
false, {tFALSE, tFALSE}, EXPR_END
for, {tFOR, tFOR}, EXPR_VALUE
if, {tIF, modifier_if}, EXPR_VALUE
in, {tIN, tIN}, EXPR_VALUE
module, {tMODULE, tMODULE}, EXPR_VALUE
next, {tNEXT, tNEXT}, EXPR_MID
nil, {tNIL, tNIL}, EXPR_END
not, {tKWNOT, tKWNOT}, EXPR_ARG
or, {tKWOR, tKWOR}, EXPR_VALUE
redo, {tREDO, tREDO}, EXPR_END
rescue, {tRESCUE, modifier_rescue}, EXPR_MID
retry, {tRETRY, tRETRY}, EXPR_END
return, {tRETURN, tRETURN}, EXPR_MID
self, {tSELF, tSELF}, EXPR_END
super, {tSUPER, tSUPER}, EXPR_ARG
then, {tTHEN, tTHEN}, EXPR_BEG
true, {tTRUE, tTRUE}, EXPR_END
undef, {tUNDEF, tUNDEF}, EXPR_FNAME
unless, {tUNLESS, modifier_unless}, EXPR_VALUE
until, {tUNTIL, modifier_until}, EXPR_VALUE
when, {tWHEN, tWHEN}, EXPR_VALUE
while, {tWHILE, modifier_while}, EXPR_VALUE
yield, {tYIELD, tYIELD}, EXPR_ARG
%%
